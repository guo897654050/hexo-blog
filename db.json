{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1514806389000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1514806389000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1514806389000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1514806389000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1514806389000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1514806389000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1514806389000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1514806389000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1514806389000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514806389000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1514806389000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1514806389000},{"_id":"themes/next/_config.yml","hash":"d409cbff4eea9b9c94e19f4ffcf4d59e6d28e30d","modified":1545191530175},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1514806389000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514806389000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1514806389000},{"_id":"source/_posts/Objects.mkd","hash":"0eb7dbfe32455cc2fc358bcf2dd93fc77707d088","modified":1545191089111},{"_id":"source/_posts/apply.mkd","hash":"c0ee1b5b6c205b7ebef97d402204215a4f3a6d72","modified":1545191061743},{"_id":"source/_posts/array.mkd","hash":"c703161a71ae9e280da7b408e815f7fff2448b8c","modified":1545191069443},{"_id":"source/_posts/docker部署.mkd","hash":"34eafb85131ed92ff08ff17c1d8a1ea6953c9fba","modified":1545191076903},{"_id":"source/_posts/es6函数.mkd","hash":"5df2bff1cf1ce394d17dc54595306ba04d8457ed","modified":1545191082623},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1545185924394},{"_id":"source/_posts/promise.mkd","hash":"39b1bcf6fcc4cd462735a49de6fb43a10d122aa8","modified":1545191096951},{"_id":"source/_posts/socket.mkd","hash":"dc71d5068276709e48ba90605578f6f489c71a9a","modified":1545191042367},{"_id":"source/about/index.md","hash":"355d571cf3ca7594932efcf2860817bc82aeee71","modified":1545190765263},{"_id":"source/categories/index.md","hash":"0185a4479a184c4c64ddc6424d717fdba6e397f6","modified":1545190932951},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1514806389000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1514806389000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1514806389000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1514806389000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1514806389000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1514806389000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1514806389000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1514806389000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1514806389000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1514806389000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1514806389000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1514806389000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1514806389000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1514806389000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1514806389000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1514806389000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1514806389000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1514806389000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1514806389000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1514806389000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1514806389000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1514806389000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1514806389000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1514806389000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1514806389000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1514806389000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1514806389000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1514806389000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1514806389000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514806389000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514806389000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514806389000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514806389000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1514806389000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1514806389000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1514806389000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1514806389000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1514806389000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1514806389000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"028bccd4cfdc9cc7b90a3e34382b980866bda357","modified":1545191327651},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1514806389000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1514806389000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514806389000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1514806389000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514806389000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514806389000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514806389000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1514806389000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514806389000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514806389000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514806389000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1514806389000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514806389000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514806389000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514806389000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1514806389000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514806389000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514806389000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514806389000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514806389000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1514806389000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514806389000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1514806389000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1514806389000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514806389000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514806389000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1514806389000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514806389000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514806389000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1514806389000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1514806389000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1514806389000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514806389000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514806389000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1514806389000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514806389000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1514806389000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1514806389000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514806389000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514806389000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514806389000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514806389000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514806389000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514806389000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514806389000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1514806389000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514806389000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514806389000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514806389000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514806389000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514806389000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514806389000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514806389000},{"_id":"themes/next/source/uploads/avatar.jpg","hash":"04717dba0e64c7af7408749e12c39e476f61ac10","modified":1545188059608},{"_id":"themes/next/source/images/avatar.jpg","hash":"ff9f4fc8f61bdf319b3c737a7c6265ca3243c061","modified":1541680428875},{"_id":"public/about/index.html","hash":"e021a4f9734db0e6fd4eca0b0b90acadb614af7d","modified":1545191887446},{"_id":"public/archives/index.html","hash":"ac95677d072fc30e548dfcf28c456d5bf9f65646","modified":1545191887447},{"_id":"public/archives/2018/index.html","hash":"b26a6849c4ca6b8d21a5156a66afc2956458ea69","modified":1545191887448},{"_id":"public/archives/2018/12/index.html","hash":"a33cee36cb45195eda4b9f2bd8920ad6ba679fb5","modified":1545191887448},{"_id":"public/2018/12/19/hello-world/index.html","hash":"730d81431c1b19b37e2752d436a4972d597ba788","modified":1545191887448},{"_id":"public/index.html","hash":"89f85eebe2d499ffe513c73f4c19db42c0c89a43","modified":1545191887448},{"_id":"public/categories/index.html","hash":"cb5840e291068c2adedccde97a443c903f24f9f3","modified":1545191887446},{"_id":"public/2018/12/09/docker部署/index.html","hash":"37b3b6eaf51585eae75078a440515f6335b6d975","modified":1545191887447},{"_id":"public/categories/javascript/index.html","hash":"4bbd260fbf85c4282e24fc182bf15d1da6522330","modified":1545191887448},{"_id":"public/categories/docker/index.html","hash":"cec7a1ec64b84d6c11fe4ed2a307dee9bd3a6b83","modified":1545191887448},{"_id":"public/categories/socket/index.html","hash":"46a71dad486a2db03f390a1bc3c849a79f8e2639","modified":1545191887448},{"_id":"public/tags/javascript/index.html","hash":"e9fda7a101605ea85fa27124f9387062f6d76598","modified":1545191887448},{"_id":"public/tags/dcoker/index.html","hash":"b9f1d2aa551fa6a96ce940ff58ff3ab6fe8d580d","modified":1545191887448},{"_id":"public/tags/网络编程/index.html","hash":"9eee381cfb5a2a678144ffedaa058d766884bace","modified":1545191887448},{"_id":"public/2018/12/19/socket/index.html","hash":"7dbf54665193c1d6f30461acd07ab9e2ffefa930","modified":1545191887448},{"_id":"public/2018/12/18/promise/index.html","hash":"adffc39060aaa86d16fc8f7ecefe645c999e4cc6","modified":1545191887448},{"_id":"public/2018/12/15/Objects/index.html","hash":"81dc25da2a333142390bc6a4b241bc68dcd9ec31","modified":1545191887448},{"_id":"public/2018/12/12/es6函数/index.html","hash":"c613aecf852ed508d2f926864ddc5838c2b30fe1","modified":1545191887448},{"_id":"public/2018/12/06/array/index.html","hash":"08cd24fc82bdf661b61e58e815e15d8a1021ed71","modified":1545191887448},{"_id":"public/2018/12/01/apply/index.html","hash":"5e157c5ce9df213fe911514d4fa47ed6153070d1","modified":1545191887448},{"_id":"public/uploads/avatar.jpg","hash":"04717dba0e64c7af7408749e12c39e476f61ac10","modified":1545191373298},{"_id":"public/images/avatar.jpg","hash":"ff9f4fc8f61bdf319b3c737a7c6265ca3243c061","modified":1545191373301},{"_id":"public/archives/page/2/index.html","hash":"1e97aa3ef05bcc7ae993780d033bc891c5eb2533","modified":1545191887449},{"_id":"public/archives/2018/page/2/index.html","hash":"db180fe9df9d042b6b9f11627bcaa21324153f93","modified":1545191887450},{"_id":"public/archives/2018/12/page/2/index.html","hash":"da5116641dcb9b3dfa9965d15d3cc38b9012ae8e","modified":1545191887450}],"Category":[{"name":"javascript","_id":"cjpumtjlz000mba72311wzwh2"},{"name":"docker","_id":"cjpumtw3a000pba72b5s330nc"},{"name":"socket","_id":"cjpumumvh000uba72g937cphm"}],"Data":[],"Page":[{"title":"About me","date":"2018-12-19T03:37:25.000Z","_content":"\n\n## wait for implement\n## how to be a coder","source":"about/index.md","raw":"---\ntitle: About me\ndate: 2018-12-19 11:37:25\n---\n\n\n## wait for implement\n## how to be a coder","updated":"2018-12-19T03:39:25.263Z","path":"about/index.html","_id":"cjpummqa80001ba72laaawf49","comments":1,"layout":"page","content":"<h2 id=\"wait-for-implement\"><a href=\"#wait-for-implement\" class=\"headerlink\" title=\"wait for implement\"></a>wait for implement</h2><h2 id=\"how-to-be-a-coder\"><a href=\"#how-to-be-a-coder\" class=\"headerlink\" title=\"how to be a coder\"></a>how to be a coder</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"wait-for-implement\"><a href=\"#wait-for-implement\" class=\"headerlink\" title=\"wait for implement\"></a>wait for implement</h2><h2 id=\"how-to-be-a-coder\"><a href=\"#how-to-be-a-coder\" class=\"headerlink\" title=\"how to be a coder\"></a>how to be a coder</h2>"},{"title":"分类","date":"2018-12-19T03:37:46.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-12-19 11:37:46\ntype: \"categories\"\n---\n","updated":"2018-12-19T03:42:12.951Z","path":"categories/index.html","_id":"cjpummqag0003ba72fhmbg61y","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"es6的Objects函数","date":"2018-12-15T02:33:09.000Z","_content":"\n## <center>对象的扩展</center>\n\n### 1.es6允许在对象之中直接书写变量    \n\n- 例一    \n\n```\nfunction f(x, y) {\n    return {x ,y}\n}\n//等同于\nfunction f(x, y) {\n    return {x: x, y: y}\n}\nf(1, 2) // Object {x :1, y:2}\n```\n - 例二    \n\n ```\n let birth = '200/01/01'\n const Person = {\n    'name': '张三',\n    birth, //等同于birth: birth\n    //等同于hello: f()\n    hello() {console.log('我的名字是:', this.name)}\n }\n ```\n \n ####2.属性名表达式    \n - 例一\n\n```\nlet propKey = 'foo'\nlet obj = {\n    [propKey]: true,\n    ['a' + 'bc']: 123\n}\nobj.abc //123\nobj.foo //true\nobj[propKey] //true\n```\n### 属性的可枚举性和遍历\n\n - 可枚举性\n\n对象的每个属性都有一个描述对象(Descriptor)，用来控制该属性的行为，Object.getOwnPropertyDescriptor方法可以获得该属性的描述对象。    \n```\nlet obj = {foo: 123}\nObject.getOwnPropertyDescriptor(obj, 'foo')\n//\n{\n    value: 123,\n    writeable: true,\n    enumerable: true,\n    configurable: true\n}\n```\nes6共有5种方法可以遍历对象的属性    \n - for ... in\n - Object.keys(obj)\n - OBject.getOwnPropertyNames(obj)\n - OBject.getOwnPropertySymbols(obj)\n - Reflect.ownKeys(obj)\n","source":"_posts/Objects.mkd","raw":"---\ntitle: es6的Objects函数\ndate: 2018-12-15 10:33:09\ntags: javascript\ncategories: javascript\n---\n\n## <center>对象的扩展</center>\n\n### 1.es6允许在对象之中直接书写变量    \n\n- 例一    \n\n```\nfunction f(x, y) {\n    return {x ,y}\n}\n//等同于\nfunction f(x, y) {\n    return {x: x, y: y}\n}\nf(1, 2) // Object {x :1, y:2}\n```\n - 例二    \n\n ```\n let birth = '200/01/01'\n const Person = {\n    'name': '张三',\n    birth, //等同于birth: birth\n    //等同于hello: f()\n    hello() {console.log('我的名字是:', this.name)}\n }\n ```\n \n ####2.属性名表达式    \n - 例一\n\n```\nlet propKey = 'foo'\nlet obj = {\n    [propKey]: true,\n    ['a' + 'bc']: 123\n}\nobj.abc //123\nobj.foo //true\nobj[propKey] //true\n```\n### 属性的可枚举性和遍历\n\n - 可枚举性\n\n对象的每个属性都有一个描述对象(Descriptor)，用来控制该属性的行为，Object.getOwnPropertyDescriptor方法可以获得该属性的描述对象。    \n```\nlet obj = {foo: 123}\nObject.getOwnPropertyDescriptor(obj, 'foo')\n//\n{\n    value: 123,\n    writeable: true,\n    enumerable: true,\n    configurable: true\n}\n```\nes6共有5种方法可以遍历对象的属性    \n - for ... in\n - Object.keys(obj)\n - OBject.getOwnPropertyNames(obj)\n - OBject.getOwnPropertySymbols(obj)\n - Reflect.ownKeys(obj)\n","slug":"Objects","published":1,"updated":"2018-12-19T03:44:49.111Z","_id":"cjpummqa40000ba725np8ecbe","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"对象的扩展\"><a href=\"#对象的扩展\" class=\"headerlink\" title=\"对象的扩展\"></a><center>对象的扩展</center></h2><h3 id=\"1-es6允许在对象之中直接书写变量\"><a href=\"#1-es6允许在对象之中直接书写变量\" class=\"headerlink\" title=\"1.es6允许在对象之中直接书写变量\"></a>1.es6允许在对象之中直接书写变量</h3><ul>\n<li>例一    </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f(x, y) &#123;</span><br><span class=\"line\">    return &#123;x ,y&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//等同于</span><br><span class=\"line\">function f(x, y) &#123;</span><br><span class=\"line\">    return &#123;x: x, y: y&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f(1, 2) // Object &#123;x :1, y:2&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>例二    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let birth = &apos;200/01/01&apos;</span><br><span class=\"line\">const Person = &#123;</span><br><span class=\"line\">   &apos;name&apos;: &apos;张三&apos;,</span><br><span class=\"line\">   birth, //等同于birth: birth</span><br><span class=\"line\">   //等同于hello: f()</span><br><span class=\"line\">   hello() &#123;console.log(&apos;我的名字是:&apos;, this.name)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p> ####2.属性名表达式    </p>\n<ul>\n<li>例一</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let propKey = &apos;foo&apos;</span><br><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">    [propKey]: true,</span><br><span class=\"line\">    [&apos;a&apos; + &apos;bc&apos;]: 123</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.abc //123</span><br><span class=\"line\">obj.foo //true</span><br><span class=\"line\">obj[propKey] //true</span><br></pre></td></tr></table></figure>\n<h3 id=\"属性的可枚举性和遍历\"><a href=\"#属性的可枚举性和遍历\" class=\"headerlink\" title=\"属性的可枚举性和遍历\"></a>属性的可枚举性和遍历</h3><ul>\n<li>可枚举性</li>\n</ul>\n<p>对象的每个属性都有一个描述对象(Descriptor)，用来控制该属性的行为，Object.getOwnPropertyDescriptor方法可以获得该属性的描述对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;foo: 123&#125;</span><br><span class=\"line\">Object.getOwnPropertyDescriptor(obj, &apos;foo&apos;)</span><br><span class=\"line\">//</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    value: 123,</span><br><span class=\"line\">    writeable: true,</span><br><span class=\"line\">    enumerable: true,</span><br><span class=\"line\">    configurable: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>es6共有5种方法可以遍历对象的属性    </p>\n<ul>\n<li>for … in</li>\n<li>Object.keys(obj)</li>\n<li>OBject.getOwnPropertyNames(obj)</li>\n<li>OBject.getOwnPropertySymbols(obj)</li>\n<li>Reflect.ownKeys(obj)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"对象的扩展\"><a href=\"#对象的扩展\" class=\"headerlink\" title=\"对象的扩展\"></a><center>对象的扩展</center></h2><h3 id=\"1-es6允许在对象之中直接书写变量\"><a href=\"#1-es6允许在对象之中直接书写变量\" class=\"headerlink\" title=\"1.es6允许在对象之中直接书写变量\"></a>1.es6允许在对象之中直接书写变量</h3><ul>\n<li>例一    </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f(x, y) &#123;</span><br><span class=\"line\">    return &#123;x ,y&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//等同于</span><br><span class=\"line\">function f(x, y) &#123;</span><br><span class=\"line\">    return &#123;x: x, y: y&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f(1, 2) // Object &#123;x :1, y:2&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>例二    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let birth = &apos;200/01/01&apos;</span><br><span class=\"line\">const Person = &#123;</span><br><span class=\"line\">   &apos;name&apos;: &apos;张三&apos;,</span><br><span class=\"line\">   birth, //等同于birth: birth</span><br><span class=\"line\">   //等同于hello: f()</span><br><span class=\"line\">   hello() &#123;console.log(&apos;我的名字是:&apos;, this.name)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p> ####2.属性名表达式    </p>\n<ul>\n<li>例一</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let propKey = &apos;foo&apos;</span><br><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">    [propKey]: true,</span><br><span class=\"line\">    [&apos;a&apos; + &apos;bc&apos;]: 123</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.abc //123</span><br><span class=\"line\">obj.foo //true</span><br><span class=\"line\">obj[propKey] //true</span><br></pre></td></tr></table></figure>\n<h3 id=\"属性的可枚举性和遍历\"><a href=\"#属性的可枚举性和遍历\" class=\"headerlink\" title=\"属性的可枚举性和遍历\"></a>属性的可枚举性和遍历</h3><ul>\n<li>可枚举性</li>\n</ul>\n<p>对象的每个属性都有一个描述对象(Descriptor)，用来控制该属性的行为，Object.getOwnPropertyDescriptor方法可以获得该属性的描述对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;foo: 123&#125;</span><br><span class=\"line\">Object.getOwnPropertyDescriptor(obj, &apos;foo&apos;)</span><br><span class=\"line\">//</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    value: 123,</span><br><span class=\"line\">    writeable: true,</span><br><span class=\"line\">    enumerable: true,</span><br><span class=\"line\">    configurable: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>es6共有5种方法可以遍历对象的属性    </p>\n<ul>\n<li>for … in</li>\n<li>Object.keys(obj)</li>\n<li>OBject.getOwnPropertyNames(obj)</li>\n<li>OBject.getOwnPropertySymbols(obj)</li>\n<li>Reflect.ownKeys(obj)</li>\n</ul>\n"},{"title":"js的apply函数","date":"2018-12-01T02:33:09.000Z","_content":"## <center>apply call bind</center>\n### 1.apply和call\n在 javascript 中，call 和 apply 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 this 的指向。\nJS的一大特点是，函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念。    \n例子：\n```\nfunction fruits() {}\n \nfruits.prototype = {\n    color: \"red\",\n    say: function() {\n        console.log(\"My color is \" + this.color);\n    }\n}\n \nvar apple = new fruits;\napple.say();    //My color is red\n```\n但是如果我们有一个对象banana= {color : \"yellow\"} ,我们不想对它重新定义 say 方法，那么我们可以通过 call 或 apply 用 apple 的 say 方法：\n```\nbanana = {\n    color: 'yellow'\n}\napple.say.call(banana); //My color is yellow\napple.say.apply(banana); //My color is yellow\n```\n### 2.apply和call的区别\n对于appl和call而言，作用是一样的，但是接收参数的方式不太一样，例如\n```\nvar func = function (arg1, arg2) {};\n```\n可以通过以下方式来调用\n```\nfunc.call(this.arg1, arg2);\nfunc.apply(this, [arg1, arg2])\n```\n其中this是指定的上下文，可以使任何的JS对象，call需要把参数按顺序传递进去，apply则是把参数放在数组里面。    \nJS中，某个函数的参数量是不确定的，知道数量用call，不确定用apply并且把参数push到数组中。    \n用法如下：\n```\nvar arr1 = [12, 'foo', {'name':'Joe'}, -201];\nvar arr2 = [\"Doe\", 555, 100]\nArray.prototype.push.apply(arr1, arr2)\n/* array1 值为  [12 , \"foo\" , {name \"Joe\"} , -2458 , \"Doe\" , 555 , 100] */\n```\n获取数组的最大最小值\n```\nvar number = [5, 458, 120, -215]\nvar maxInNumber = Math.max.apply(Math, numbers) //458\nvar maxInNumber = Math.max.call(Math, 5, 458, 120, -215) //-215\n```\nnumber本身没有Max方法，但是Math有，我们可以借助call或者apply使用其方法。    \n对于伪数组的使用数组方法\n```\nvar domNodes = Array.prototype.slice.call(document.getElementsByTagName('*'))\n```\nJS存在一种名为伪数组的对象结构，还有像调用getElementByTagName,document.childNodes返回的NodeList都是伪数组，不可以应用Array的push，pop方法。可以通过Array.prototype.slice.apply转化为真正的数组带有length属性的对象。\n### 3.深入理解call和apply\n一个题目，定义一个log方法，去代理console.log方法，常用的解决方案。\n```\nfunction log(msg) {\n    cosole.log(msg)\n}\nlog(1) //1\nlog(1,2) //1\n```\n当传入的参数不确定的时候，上面的方法就失效了，考虑使用apply和call，因为不固定的所以肯定要用apply了，方法如下：\n```\nfunction log() {\n    var args = Array.prototype.slice.call(arguments)\n    console.log.apply(console, args)\n}\nlog(1) //1\n\nlog(1, 2) //1,2\n```\n### 4.bind详解\nMDN的解释是：bind()方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind()方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。\n\n直接来看看具体如何使用，在常见的单体模式中，通常我们会使用 _this , that , self 等保存 this ，这样我们可以在改变了上下文之后继续引用到它。 像这样\n```\nvar foo = {\n    bar: 1,\n    eventBind: function() {\n        var _this = this\n        $('.someClass').on('click',function(e){\n            console.log(this.bar) //1\n        })\n    }\n}\n```\n由于 Javascript 特有的机制，上下文环境在 eventBind:function(){ } 过渡到 $('.someClass').on('click',function(event) { }) 发生了改变，上述使用变量保存 this 这些方式都是有用的，也没有什么问题。当然使用 bind() 可以更加优雅的解决这个问题：\n```\nvar foo = {\n    bar: 1,\n    eventBind: function() {\n        $('.someClass').on('click', function(e){\n            console.log(this.bar) //1\n        }).bind(this)\n        \n    }\n}\n```\n在上述代码中，bind绑定了一个函数，当这个click函数被调用的时候，他的this的关键字会被设置成传入的值，这里我们想要传入的参数其实是对象foo到bind函数，当函数执行的时候，this便指向foo对象。\n```\nvar bar = function() {\n    console.log(this.x)\n}\nvar foo = {\n    x:3\n}\nbar() //undefined\nvar func = bar.bind(foo);\nfunc() //3\n```\n那么当我们多bind几次会发生什么现象呢？\n```\nvar bar = function() {\n    caonsole.log(this.x)\n}\nvar foo = {\n    x:3\n}\nvar sed = {\n    x:4\n}\nvar func = bar.bind(foo).bind(sed)\nfunc() //?\nvar five = {\n    x:5\n}\nvar func = bar.bind(foo).bind(sed).bind(five)\nfunc() //?\n```\n两次结果输出都是3，在js中多次bind是无效的\n### 5三者的比较\n```\nvar obj = {\n    x: 81,\n};\n \nvar foo = {\n    getX: function() {\n        return this.x;\n    }\n}\n \nconsole.log(foo.getX.bind(obj)());  //81\nconsole.log(foo.getX.call(obj));    //81\n```\n三个输出的都是81，但是注意看使用 bind() 方法的，他后面多了对括号。\n\n也就是说，区别是，当你希望改变上下文环境之后并非立即执行，而是回调执行的时候，使用 bind() 方法。而 apply/call 则会立即执行函数。\n再总结一下：\n\n- apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；\n- apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；\n- apply 、 call 、bind 三者都可以利用后续参数传参；\nbind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。\n","source":"_posts/apply.mkd","raw":"---\ntitle: js的apply函数\ndate: 2018-12-01 10:33:09\ntags: javascript\ncategories: javascript\n---\n## <center>apply call bind</center>\n### 1.apply和call\n在 javascript 中，call 和 apply 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 this 的指向。\nJS的一大特点是，函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念。    \n例子：\n```\nfunction fruits() {}\n \nfruits.prototype = {\n    color: \"red\",\n    say: function() {\n        console.log(\"My color is \" + this.color);\n    }\n}\n \nvar apple = new fruits;\napple.say();    //My color is red\n```\n但是如果我们有一个对象banana= {color : \"yellow\"} ,我们不想对它重新定义 say 方法，那么我们可以通过 call 或 apply 用 apple 的 say 方法：\n```\nbanana = {\n    color: 'yellow'\n}\napple.say.call(banana); //My color is yellow\napple.say.apply(banana); //My color is yellow\n```\n### 2.apply和call的区别\n对于appl和call而言，作用是一样的，但是接收参数的方式不太一样，例如\n```\nvar func = function (arg1, arg2) {};\n```\n可以通过以下方式来调用\n```\nfunc.call(this.arg1, arg2);\nfunc.apply(this, [arg1, arg2])\n```\n其中this是指定的上下文，可以使任何的JS对象，call需要把参数按顺序传递进去，apply则是把参数放在数组里面。    \nJS中，某个函数的参数量是不确定的，知道数量用call，不确定用apply并且把参数push到数组中。    \n用法如下：\n```\nvar arr1 = [12, 'foo', {'name':'Joe'}, -201];\nvar arr2 = [\"Doe\", 555, 100]\nArray.prototype.push.apply(arr1, arr2)\n/* array1 值为  [12 , \"foo\" , {name \"Joe\"} , -2458 , \"Doe\" , 555 , 100] */\n```\n获取数组的最大最小值\n```\nvar number = [5, 458, 120, -215]\nvar maxInNumber = Math.max.apply(Math, numbers) //458\nvar maxInNumber = Math.max.call(Math, 5, 458, 120, -215) //-215\n```\nnumber本身没有Max方法，但是Math有，我们可以借助call或者apply使用其方法。    \n对于伪数组的使用数组方法\n```\nvar domNodes = Array.prototype.slice.call(document.getElementsByTagName('*'))\n```\nJS存在一种名为伪数组的对象结构，还有像调用getElementByTagName,document.childNodes返回的NodeList都是伪数组，不可以应用Array的push，pop方法。可以通过Array.prototype.slice.apply转化为真正的数组带有length属性的对象。\n### 3.深入理解call和apply\n一个题目，定义一个log方法，去代理console.log方法，常用的解决方案。\n```\nfunction log(msg) {\n    cosole.log(msg)\n}\nlog(1) //1\nlog(1,2) //1\n```\n当传入的参数不确定的时候，上面的方法就失效了，考虑使用apply和call，因为不固定的所以肯定要用apply了，方法如下：\n```\nfunction log() {\n    var args = Array.prototype.slice.call(arguments)\n    console.log.apply(console, args)\n}\nlog(1) //1\n\nlog(1, 2) //1,2\n```\n### 4.bind详解\nMDN的解释是：bind()方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind()方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。\n\n直接来看看具体如何使用，在常见的单体模式中，通常我们会使用 _this , that , self 等保存 this ，这样我们可以在改变了上下文之后继续引用到它。 像这样\n```\nvar foo = {\n    bar: 1,\n    eventBind: function() {\n        var _this = this\n        $('.someClass').on('click',function(e){\n            console.log(this.bar) //1\n        })\n    }\n}\n```\n由于 Javascript 特有的机制，上下文环境在 eventBind:function(){ } 过渡到 $('.someClass').on('click',function(event) { }) 发生了改变，上述使用变量保存 this 这些方式都是有用的，也没有什么问题。当然使用 bind() 可以更加优雅的解决这个问题：\n```\nvar foo = {\n    bar: 1,\n    eventBind: function() {\n        $('.someClass').on('click', function(e){\n            console.log(this.bar) //1\n        }).bind(this)\n        \n    }\n}\n```\n在上述代码中，bind绑定了一个函数，当这个click函数被调用的时候，他的this的关键字会被设置成传入的值，这里我们想要传入的参数其实是对象foo到bind函数，当函数执行的时候，this便指向foo对象。\n```\nvar bar = function() {\n    console.log(this.x)\n}\nvar foo = {\n    x:3\n}\nbar() //undefined\nvar func = bar.bind(foo);\nfunc() //3\n```\n那么当我们多bind几次会发生什么现象呢？\n```\nvar bar = function() {\n    caonsole.log(this.x)\n}\nvar foo = {\n    x:3\n}\nvar sed = {\n    x:4\n}\nvar func = bar.bind(foo).bind(sed)\nfunc() //?\nvar five = {\n    x:5\n}\nvar func = bar.bind(foo).bind(sed).bind(five)\nfunc() //?\n```\n两次结果输出都是3，在js中多次bind是无效的\n### 5三者的比较\n```\nvar obj = {\n    x: 81,\n};\n \nvar foo = {\n    getX: function() {\n        return this.x;\n    }\n}\n \nconsole.log(foo.getX.bind(obj)());  //81\nconsole.log(foo.getX.call(obj));    //81\n```\n三个输出的都是81，但是注意看使用 bind() 方法的，他后面多了对括号。\n\n也就是说，区别是，当你希望改变上下文环境之后并非立即执行，而是回调执行的时候，使用 bind() 方法。而 apply/call 则会立即执行函数。\n再总结一下：\n\n- apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；\n- apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；\n- apply 、 call 、bind 三者都可以利用后续参数传参；\nbind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。\n","slug":"apply","published":1,"updated":"2018-12-19T03:44:21.743Z","_id":"cjpummqae0002ba72szu7xkoo","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"apply-call-bind\"><a href=\"#apply-call-bind\" class=\"headerlink\" title=\"apply call bind\"></a><center>apply call bind</center></h2><h3 id=\"1-apply和call\"><a href=\"#1-apply和call\" class=\"headerlink\" title=\"1.apply和call\"></a>1.apply和call</h3><p>在 javascript 中，call 和 apply 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 this 的指向。<br>JS的一大特点是，函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念。<br>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fruits() &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">fruits.prototype = &#123;</span><br><span class=\"line\">    color: &quot;red&quot;,</span><br><span class=\"line\">    say: function() &#123;</span><br><span class=\"line\">        console.log(&quot;My color is &quot; + this.color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">var apple = new fruits;</span><br><span class=\"line\">apple.say();    //My color is red</span><br></pre></td></tr></table></figure></p>\n<p>但是如果我们有一个对象banana= {color : “yellow”} ,我们不想对它重新定义 say 方法，那么我们可以通过 call 或 apply 用 apple 的 say 方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">banana = &#123;</span><br><span class=\"line\">    color: &apos;yellow&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">apple.say.call(banana); //My color is yellow</span><br><span class=\"line\">apple.say.apply(banana); //My color is yellow</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-apply和call的区别\"><a href=\"#2-apply和call的区别\" class=\"headerlink\" title=\"2.apply和call的区别\"></a>2.apply和call的区别</h3><p>对于appl和call而言，作用是一样的，但是接收参数的方式不太一样，例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var func = function (arg1, arg2) &#123;&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>可以通过以下方式来调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func.call(this.arg1, arg2);</span><br><span class=\"line\">func.apply(this, [arg1, arg2])</span><br></pre></td></tr></table></figure></p>\n<p>其中this是指定的上下文，可以使任何的JS对象，call需要把参数按顺序传递进去，apply则是把参数放在数组里面。<br>JS中，某个函数的参数量是不确定的，知道数量用call，不确定用apply并且把参数push到数组中。<br>用法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr1 = [12, &apos;foo&apos;, &#123;&apos;name&apos;:&apos;Joe&apos;&#125;, -201];</span><br><span class=\"line\">var arr2 = [&quot;Doe&quot;, 555, 100]</span><br><span class=\"line\">Array.prototype.push.apply(arr1, arr2)</span><br><span class=\"line\">/* array1 值为  [12 , &quot;foo&quot; , &#123;name &quot;Joe&quot;&#125; , -2458 , &quot;Doe&quot; , 555 , 100] */</span><br></pre></td></tr></table></figure></p>\n<p>获取数组的最大最小值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var number = [5, 458, 120, -215]</span><br><span class=\"line\">var maxInNumber = Math.max.apply(Math, numbers) //458</span><br><span class=\"line\">var maxInNumber = Math.max.call(Math, 5, 458, 120, -215) //-215</span><br></pre></td></tr></table></figure></p>\n<p>number本身没有Max方法，但是Math有，我们可以借助call或者apply使用其方法。<br>对于伪数组的使用数组方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var domNodes = Array.prototype.slice.call(document.getElementsByTagName(&apos;*&apos;))</span><br></pre></td></tr></table></figure></p>\n<p>JS存在一种名为伪数组的对象结构，还有像调用getElementByTagName,document.childNodes返回的NodeList都是伪数组，不可以应用Array的push，pop方法。可以通过Array.prototype.slice.apply转化为真正的数组带有length属性的对象。</p>\n<h3 id=\"3-深入理解call和apply\"><a href=\"#3-深入理解call和apply\" class=\"headerlink\" title=\"3.深入理解call和apply\"></a>3.深入理解call和apply</h3><p>一个题目，定义一个log方法，去代理console.log方法，常用的解决方案。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function log(msg) &#123;</span><br><span class=\"line\">    cosole.log(msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log(1) //1</span><br><span class=\"line\">log(1,2) //1</span><br></pre></td></tr></table></figure></p>\n<p>当传入的参数不确定的时候，上面的方法就失效了，考虑使用apply和call，因为不固定的所以肯定要用apply了，方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function log() &#123;</span><br><span class=\"line\">    var args = Array.prototype.slice.call(arguments)</span><br><span class=\"line\">    console.log.apply(console, args)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log(1) //1</span><br><span class=\"line\"></span><br><span class=\"line\">log(1, 2) //1,2</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-bind详解\"><a href=\"#4-bind详解\" class=\"headerlink\" title=\"4.bind详解\"></a>4.bind详解</h3><p>MDN的解释是：bind()方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind()方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。</p>\n<p>直接来看看具体如何使用，在常见的单体模式中，通常我们会使用 _this , that , self 等保存 this ，这样我们可以在改变了上下文之后继续引用到它。 像这样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = &#123;</span><br><span class=\"line\">    bar: 1,</span><br><span class=\"line\">    eventBind: function() &#123;</span><br><span class=\"line\">        var _this = this</span><br><span class=\"line\">        $(&apos;.someClass&apos;).on(&apos;click&apos;,function(e)&#123;</span><br><span class=\"line\">            console.log(this.bar) //1</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>由于 Javascript 特有的机制，上下文环境在 eventBind:function(){ } 过渡到 $(‘.someClass’).on(‘click’,function(event) { }) 发生了改变，上述使用变量保存 this 这些方式都是有用的，也没有什么问题。当然使用 bind() 可以更加优雅的解决这个问题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = &#123;</span><br><span class=\"line\">    bar: 1,</span><br><span class=\"line\">    eventBind: function() &#123;</span><br><span class=\"line\">        $(&apos;.someClass&apos;).on(&apos;click&apos;, function(e)&#123;</span><br><span class=\"line\">            console.log(this.bar) //1</span><br><span class=\"line\">        &#125;).bind(this)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上述代码中，bind绑定了一个函数，当这个click函数被调用的时候，他的this的关键字会被设置成传入的值，这里我们想要传入的参数其实是对象foo到bind函数，当函数执行的时候，this便指向foo对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bar = function() &#123;</span><br><span class=\"line\">    console.log(this.x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var foo = &#123;</span><br><span class=\"line\">    x:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar() //undefined</span><br><span class=\"line\">var func = bar.bind(foo);</span><br><span class=\"line\">func() //3</span><br></pre></td></tr></table></figure></p>\n<p>那么当我们多bind几次会发生什么现象呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bar = function() &#123;</span><br><span class=\"line\">    caonsole.log(this.x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var foo = &#123;</span><br><span class=\"line\">    x:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var sed = &#123;</span><br><span class=\"line\">    x:4</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var func = bar.bind(foo).bind(sed)</span><br><span class=\"line\">func() //?</span><br><span class=\"line\">var five = &#123;</span><br><span class=\"line\">    x:5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var func = bar.bind(foo).bind(sed).bind(five)</span><br><span class=\"line\">func() //?</span><br></pre></td></tr></table></figure></p>\n<p>两次结果输出都是3，在js中多次bind是无效的</p>\n<h3 id=\"5三者的比较\"><a href=\"#5三者的比较\" class=\"headerlink\" title=\"5三者的比较\"></a>5三者的比较</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    x: 81,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">var foo = &#123;</span><br><span class=\"line\">    getX: function() &#123;</span><br><span class=\"line\">        return this.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(foo.getX.bind(obj)());  //81</span><br><span class=\"line\">console.log(foo.getX.call(obj));    //81</span><br></pre></td></tr></table></figure>\n<p>三个输出的都是81，但是注意看使用 bind() 方法的，他后面多了对括号。</p>\n<p>也就是说，区别是，当你希望改变上下文环境之后并非立即执行，而是回调执行的时候，使用 bind() 方法。而 apply/call 则会立即执行函数。<br>再总结一下：</p>\n<ul>\n<li>apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；</li>\n<li>apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；</li>\n<li>apply 、 call 、bind 三者都可以利用后续参数传参；<br>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"apply-call-bind\"><a href=\"#apply-call-bind\" class=\"headerlink\" title=\"apply call bind\"></a><center>apply call bind</center></h2><h3 id=\"1-apply和call\"><a href=\"#1-apply和call\" class=\"headerlink\" title=\"1.apply和call\"></a>1.apply和call</h3><p>在 javascript 中，call 和 apply 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 this 的指向。<br>JS的一大特点是，函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念。<br>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fruits() &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">fruits.prototype = &#123;</span><br><span class=\"line\">    color: &quot;red&quot;,</span><br><span class=\"line\">    say: function() &#123;</span><br><span class=\"line\">        console.log(&quot;My color is &quot; + this.color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">var apple = new fruits;</span><br><span class=\"line\">apple.say();    //My color is red</span><br></pre></td></tr></table></figure></p>\n<p>但是如果我们有一个对象banana= {color : “yellow”} ,我们不想对它重新定义 say 方法，那么我们可以通过 call 或 apply 用 apple 的 say 方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">banana = &#123;</span><br><span class=\"line\">    color: &apos;yellow&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">apple.say.call(banana); //My color is yellow</span><br><span class=\"line\">apple.say.apply(banana); //My color is yellow</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-apply和call的区别\"><a href=\"#2-apply和call的区别\" class=\"headerlink\" title=\"2.apply和call的区别\"></a>2.apply和call的区别</h3><p>对于appl和call而言，作用是一样的，但是接收参数的方式不太一样，例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var func = function (arg1, arg2) &#123;&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>可以通过以下方式来调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func.call(this.arg1, arg2);</span><br><span class=\"line\">func.apply(this, [arg1, arg2])</span><br></pre></td></tr></table></figure></p>\n<p>其中this是指定的上下文，可以使任何的JS对象，call需要把参数按顺序传递进去，apply则是把参数放在数组里面。<br>JS中，某个函数的参数量是不确定的，知道数量用call，不确定用apply并且把参数push到数组中。<br>用法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr1 = [12, &apos;foo&apos;, &#123;&apos;name&apos;:&apos;Joe&apos;&#125;, -201];</span><br><span class=\"line\">var arr2 = [&quot;Doe&quot;, 555, 100]</span><br><span class=\"line\">Array.prototype.push.apply(arr1, arr2)</span><br><span class=\"line\">/* array1 值为  [12 , &quot;foo&quot; , &#123;name &quot;Joe&quot;&#125; , -2458 , &quot;Doe&quot; , 555 , 100] */</span><br></pre></td></tr></table></figure></p>\n<p>获取数组的最大最小值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var number = [5, 458, 120, -215]</span><br><span class=\"line\">var maxInNumber = Math.max.apply(Math, numbers) //458</span><br><span class=\"line\">var maxInNumber = Math.max.call(Math, 5, 458, 120, -215) //-215</span><br></pre></td></tr></table></figure></p>\n<p>number本身没有Max方法，但是Math有，我们可以借助call或者apply使用其方法。<br>对于伪数组的使用数组方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var domNodes = Array.prototype.slice.call(document.getElementsByTagName(&apos;*&apos;))</span><br></pre></td></tr></table></figure></p>\n<p>JS存在一种名为伪数组的对象结构，还有像调用getElementByTagName,document.childNodes返回的NodeList都是伪数组，不可以应用Array的push，pop方法。可以通过Array.prototype.slice.apply转化为真正的数组带有length属性的对象。</p>\n<h3 id=\"3-深入理解call和apply\"><a href=\"#3-深入理解call和apply\" class=\"headerlink\" title=\"3.深入理解call和apply\"></a>3.深入理解call和apply</h3><p>一个题目，定义一个log方法，去代理console.log方法，常用的解决方案。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function log(msg) &#123;</span><br><span class=\"line\">    cosole.log(msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log(1) //1</span><br><span class=\"line\">log(1,2) //1</span><br></pre></td></tr></table></figure></p>\n<p>当传入的参数不确定的时候，上面的方法就失效了，考虑使用apply和call，因为不固定的所以肯定要用apply了，方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function log() &#123;</span><br><span class=\"line\">    var args = Array.prototype.slice.call(arguments)</span><br><span class=\"line\">    console.log.apply(console, args)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log(1) //1</span><br><span class=\"line\"></span><br><span class=\"line\">log(1, 2) //1,2</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-bind详解\"><a href=\"#4-bind详解\" class=\"headerlink\" title=\"4.bind详解\"></a>4.bind详解</h3><p>MDN的解释是：bind()方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind()方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。</p>\n<p>直接来看看具体如何使用，在常见的单体模式中，通常我们会使用 _this , that , self 等保存 this ，这样我们可以在改变了上下文之后继续引用到它。 像这样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = &#123;</span><br><span class=\"line\">    bar: 1,</span><br><span class=\"line\">    eventBind: function() &#123;</span><br><span class=\"line\">        var _this = this</span><br><span class=\"line\">        $(&apos;.someClass&apos;).on(&apos;click&apos;,function(e)&#123;</span><br><span class=\"line\">            console.log(this.bar) //1</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>由于 Javascript 特有的机制，上下文环境在 eventBind:function(){ } 过渡到 $(‘.someClass’).on(‘click’,function(event) { }) 发生了改变，上述使用变量保存 this 这些方式都是有用的，也没有什么问题。当然使用 bind() 可以更加优雅的解决这个问题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = &#123;</span><br><span class=\"line\">    bar: 1,</span><br><span class=\"line\">    eventBind: function() &#123;</span><br><span class=\"line\">        $(&apos;.someClass&apos;).on(&apos;click&apos;, function(e)&#123;</span><br><span class=\"line\">            console.log(this.bar) //1</span><br><span class=\"line\">        &#125;).bind(this)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上述代码中，bind绑定了一个函数，当这个click函数被调用的时候，他的this的关键字会被设置成传入的值，这里我们想要传入的参数其实是对象foo到bind函数，当函数执行的时候，this便指向foo对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bar = function() &#123;</span><br><span class=\"line\">    console.log(this.x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var foo = &#123;</span><br><span class=\"line\">    x:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar() //undefined</span><br><span class=\"line\">var func = bar.bind(foo);</span><br><span class=\"line\">func() //3</span><br></pre></td></tr></table></figure></p>\n<p>那么当我们多bind几次会发生什么现象呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bar = function() &#123;</span><br><span class=\"line\">    caonsole.log(this.x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var foo = &#123;</span><br><span class=\"line\">    x:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var sed = &#123;</span><br><span class=\"line\">    x:4</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var func = bar.bind(foo).bind(sed)</span><br><span class=\"line\">func() //?</span><br><span class=\"line\">var five = &#123;</span><br><span class=\"line\">    x:5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var func = bar.bind(foo).bind(sed).bind(five)</span><br><span class=\"line\">func() //?</span><br></pre></td></tr></table></figure></p>\n<p>两次结果输出都是3，在js中多次bind是无效的</p>\n<h3 id=\"5三者的比较\"><a href=\"#5三者的比较\" class=\"headerlink\" title=\"5三者的比较\"></a>5三者的比较</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    x: 81,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">var foo = &#123;</span><br><span class=\"line\">    getX: function() &#123;</span><br><span class=\"line\">        return this.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(foo.getX.bind(obj)());  //81</span><br><span class=\"line\">console.log(foo.getX.call(obj));    //81</span><br></pre></td></tr></table></figure>\n<p>三个输出的都是81，但是注意看使用 bind() 方法的，他后面多了对括号。</p>\n<p>也就是说，区别是，当你希望改变上下文环境之后并非立即执行，而是回调执行的时候，使用 bind() 方法。而 apply/call 则会立即执行函数。<br>再总结一下：</p>\n<ul>\n<li>apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；</li>\n<li>apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；</li>\n<li>apply 、 call 、bind 三者都可以利用后续参数传参；<br>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。</li>\n</ul>\n"},{"title":"es6的数组","date":"2018-12-06T02:33:09.000Z","_content":"\n## <center>es6数组</center>\n\n### 1.扩展运算符\n```\nconsole.log(...[1,2,3]) //1,2,3\nconsole.log(1, ...[2,3,4],5)\n```\n\n- 取代apply的例子\n\n```\nES5: Math.max.apply(null, [14,3,3])\nES6: Math.max(...[14,3,37])\n```\n\n- 另一个数组push的例子\n\n```\nvar arr1 = [0,1,2]\nvar arr2 = [3,4,5]\nArray.prototype.push.apply(arr1, arr2)\nES6: arr1.push(...arr2)\n```\n- 扩展运算符的应用    \n1.复制数组\n\n```\nconst a1 = [1,2]\nconst a2 = a1\na2[0] = 2\na1 //[2,2,]\n```\n上述代码中，a2并不是数组a1的克隆，而是指向同一份数据的指针，修改a2，那么a1也会变化，es5的方法\n```\nconst a1 = [1,2]\ncosnta a2 = a1.contact()\na2[0] = 2\na1 //[1,2]\n```\n上述代码中a1会返回原数组的克隆，再修改a2就不会对a1产生影响，对于es6的写法如下\n```\nconst a1 = [1,2]\nconst a2 = [...a1]\n```\n\n2.合并数组\n\n```\nconst arr1 = ['a', 'b']\nconst arr2 = ['c']\nconst arr3 = ['d', 'e']\nes5合并: arr1.contanct(arr2,arr3)\nes6合并: [...arr1,...arr2,...arr3]\n```\n但是上述方法均是浅拷贝，如果修改了原数组的变量，那么会同步映射到新的合并的数组。\n\n3.与解构赋值结合\n```\nconst [first, ...rest] = [1,2,3,4,5]\nfirst //1\nrest //[2,3,4,5]\nconst [first, ...rest] = []\nfirst //undefined\nrest //[]\nconst [first, ...rest] = ['foo']\nfirst //'foo'\nrest //[]\n```\n### 2.Array.from()\nArray.from方法用于将两类对象转化为真正的数组：类数组对象(array-like object)和可遍历对象(iterable)，类数组对象是指可以通过索引访问元素，并且拥有length属性，但是没有数组的其他方法，如push，forEach，indexOf。常见的像字典，DOM操作返回的NodeList,以及函数内部的arguments对象\n```\nlet arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n};\n\n// ES5的写法\nvar arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']\n\n// ES6的写法\nlet arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\n```\n### Array.of()\nArray.of方法将一组值转化为数组\n```\nArray.of(1,11,3) //[1,11,3]\nArray.of() //[]\n```\n### 数组实例的find和findIndex\n数组实例的find方法，用于找出第一个符合条件的数组成员，他的参数是一个回调函数，若没有返回则为undefined\n```\n[1,3,-5,18].find((n) => n < 0) //-5\n[1,5,10,15].find(function(value, index, arr){\n    return value > 9\n}) //2\n```\nfindIndex同上\n### 数组实例的fill\n```\n['a', 'b', 'c'].fill(7)\n// [7, 7, 7]\n\nnew Array(3).fill(7)\n// [7, 7, 7]\n['a', 'b', 'c'].fill(7, 1, 2)\n// ['a', 7, 'c']\n```\n### 数组实例的 entries()，keys() 和 values()\nES6 提供三个新的方法——entries()，keys()和values()——用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章），可以用for...of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。\n\n```\nfor (let index of ['a', 'b'].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n\nfor (let elem of ['a', 'b'].values()) {\n  console.log(elem);\n}\n// 'a'\n// 'b'\n\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n```\n\n### Array.prototype.includes\nArray.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。ES2016 引入了该方法。\n\n```\n[1, 2, 3].includes(2)     // true\n[1, 2, 3].includes(4)     // false\n[1, 2, NaN].includes(NaN) // true\n```\n该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。\n```\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n```\n### 数组实例的 flat()，flatMap()\n数组的成员有时还是数组，Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。\n```\n[1, 2, [3, 4]].flat()\n// [1, 2, 3, 4]\n```\nflat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1。\n```\n[1, 2, [3, [4, 5]]].flat()\n// [1, 2, 3, [4, 5]]\n\n[1, 2, [3, [4, 5]]].flat(2)\n// [1, 2, 3, 4, 5]\n```\n如果不管有多少层嵌套，都要转成一维数组，可以用Infinity关键字作为参数。\n```\n[1, [2, [3]]].flat(Infinity)\n// [1, 2, 3]\n```","source":"_posts/array.mkd","raw":"---\ntitle: es6的数组\ndate: 2018-12-06 10:33:09\ntags: javascript\ncategories: javascript\n---\n\n## <center>es6数组</center>\n\n### 1.扩展运算符\n```\nconsole.log(...[1,2,3]) //1,2,3\nconsole.log(1, ...[2,3,4],5)\n```\n\n- 取代apply的例子\n\n```\nES5: Math.max.apply(null, [14,3,3])\nES6: Math.max(...[14,3,37])\n```\n\n- 另一个数组push的例子\n\n```\nvar arr1 = [0,1,2]\nvar arr2 = [3,4,5]\nArray.prototype.push.apply(arr1, arr2)\nES6: arr1.push(...arr2)\n```\n- 扩展运算符的应用    \n1.复制数组\n\n```\nconst a1 = [1,2]\nconst a2 = a1\na2[0] = 2\na1 //[2,2,]\n```\n上述代码中，a2并不是数组a1的克隆，而是指向同一份数据的指针，修改a2，那么a1也会变化，es5的方法\n```\nconst a1 = [1,2]\ncosnta a2 = a1.contact()\na2[0] = 2\na1 //[1,2]\n```\n上述代码中a1会返回原数组的克隆，再修改a2就不会对a1产生影响，对于es6的写法如下\n```\nconst a1 = [1,2]\nconst a2 = [...a1]\n```\n\n2.合并数组\n\n```\nconst arr1 = ['a', 'b']\nconst arr2 = ['c']\nconst arr3 = ['d', 'e']\nes5合并: arr1.contanct(arr2,arr3)\nes6合并: [...arr1,...arr2,...arr3]\n```\n但是上述方法均是浅拷贝，如果修改了原数组的变量，那么会同步映射到新的合并的数组。\n\n3.与解构赋值结合\n```\nconst [first, ...rest] = [1,2,3,4,5]\nfirst //1\nrest //[2,3,4,5]\nconst [first, ...rest] = []\nfirst //undefined\nrest //[]\nconst [first, ...rest] = ['foo']\nfirst //'foo'\nrest //[]\n```\n### 2.Array.from()\nArray.from方法用于将两类对象转化为真正的数组：类数组对象(array-like object)和可遍历对象(iterable)，类数组对象是指可以通过索引访问元素，并且拥有length属性，但是没有数组的其他方法，如push，forEach，indexOf。常见的像字典，DOM操作返回的NodeList,以及函数内部的arguments对象\n```\nlet arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n};\n\n// ES5的写法\nvar arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']\n\n// ES6的写法\nlet arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\n```\n### Array.of()\nArray.of方法将一组值转化为数组\n```\nArray.of(1,11,3) //[1,11,3]\nArray.of() //[]\n```\n### 数组实例的find和findIndex\n数组实例的find方法，用于找出第一个符合条件的数组成员，他的参数是一个回调函数，若没有返回则为undefined\n```\n[1,3,-5,18].find((n) => n < 0) //-5\n[1,5,10,15].find(function(value, index, arr){\n    return value > 9\n}) //2\n```\nfindIndex同上\n### 数组实例的fill\n```\n['a', 'b', 'c'].fill(7)\n// [7, 7, 7]\n\nnew Array(3).fill(7)\n// [7, 7, 7]\n['a', 'b', 'c'].fill(7, 1, 2)\n// ['a', 7, 'c']\n```\n### 数组实例的 entries()，keys() 和 values()\nES6 提供三个新的方法——entries()，keys()和values()——用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章），可以用for...of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。\n\n```\nfor (let index of ['a', 'b'].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n\nfor (let elem of ['a', 'b'].values()) {\n  console.log(elem);\n}\n// 'a'\n// 'b'\n\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n```\n\n### Array.prototype.includes\nArray.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。ES2016 引入了该方法。\n\n```\n[1, 2, 3].includes(2)     // true\n[1, 2, 3].includes(4)     // false\n[1, 2, NaN].includes(NaN) // true\n```\n该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。\n```\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n```\n### 数组实例的 flat()，flatMap()\n数组的成员有时还是数组，Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。\n```\n[1, 2, [3, 4]].flat()\n// [1, 2, 3, 4]\n```\nflat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1。\n```\n[1, 2, [3, [4, 5]]].flat()\n// [1, 2, 3, [4, 5]]\n\n[1, 2, [3, [4, 5]]].flat(2)\n// [1, 2, 3, 4, 5]\n```\n如果不管有多少层嵌套，都要转成一维数组，可以用Infinity关键字作为参数。\n```\n[1, [2, [3]]].flat(Infinity)\n// [1, 2, 3]\n```","slug":"array","published":1,"updated":"2018-12-19T03:44:29.443Z","_id":"cjpummqak0005ba72j124awgs","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"es6数组\"><a href=\"#es6数组\" class=\"headerlink\" title=\"es6数组\"></a><center>es6数组</center></h2><h3 id=\"1-扩展运算符\"><a href=\"#1-扩展运算符\" class=\"headerlink\" title=\"1.扩展运算符\"></a>1.扩展运算符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(...[1,2,3]) //1,2,3</span><br><span class=\"line\">console.log(1, ...[2,3,4],5)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>取代apply的例子</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ES5: Math.max.apply(null, [14,3,3])</span><br><span class=\"line\">ES6: Math.max(...[14,3,37])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>另一个数组push的例子</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr1 = [0,1,2]</span><br><span class=\"line\">var arr2 = [3,4,5]</span><br><span class=\"line\">Array.prototype.push.apply(arr1, arr2)</span><br><span class=\"line\">ES6: arr1.push(...arr2)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>扩展运算符的应用<br>1.复制数组</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a1 = [1,2]</span><br><span class=\"line\">const a2 = a1</span><br><span class=\"line\">a2[0] = 2</span><br><span class=\"line\">a1 //[2,2,]</span><br></pre></td></tr></table></figure>\n<p>上述代码中，a2并不是数组a1的克隆，而是指向同一份数据的指针，修改a2，那么a1也会变化，es5的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a1 = [1,2]</span><br><span class=\"line\">cosnta a2 = a1.contact()</span><br><span class=\"line\">a2[0] = 2</span><br><span class=\"line\">a1 //[1,2]</span><br></pre></td></tr></table></figure></p>\n<p>上述代码中a1会返回原数组的克隆，再修改a2就不会对a1产生影响，对于es6的写法如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a1 = [1,2]</span><br><span class=\"line\">const a2 = [...a1]</span><br></pre></td></tr></table></figure></p>\n<p>2.合并数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr1 = [&apos;a&apos;, &apos;b&apos;]</span><br><span class=\"line\">const arr2 = [&apos;c&apos;]</span><br><span class=\"line\">const arr3 = [&apos;d&apos;, &apos;e&apos;]</span><br><span class=\"line\">es5合并: arr1.contanct(arr2,arr3)</span><br><span class=\"line\">es6合并: [...arr1,...arr2,...arr3]</span><br></pre></td></tr></table></figure>\n<p>但是上述方法均是浅拷贝，如果修改了原数组的变量，那么会同步映射到新的合并的数组。</p>\n<p>3.与解构赋值结合<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [first, ...rest] = [1,2,3,4,5]</span><br><span class=\"line\">first //1</span><br><span class=\"line\">rest //[2,3,4,5]</span><br><span class=\"line\">const [first, ...rest] = []</span><br><span class=\"line\">first //undefined</span><br><span class=\"line\">rest //[]</span><br><span class=\"line\">const [first, ...rest] = [&apos;foo&apos;]</span><br><span class=\"line\">first //&apos;foo&apos;</span><br><span class=\"line\">rest //[]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-Array-from\"><a href=\"#2-Array-from\" class=\"headerlink\" title=\"2.Array.from()\"></a>2.Array.from()</h3><p>Array.from方法用于将两类对象转化为真正的数组：类数组对象(array-like object)和可遍历对象(iterable)，类数组对象是指可以通过索引访问元素，并且拥有length属性，但是没有数组的其他方法，如push，forEach，indexOf。常见的像字典，DOM操作返回的NodeList,以及函数内部的arguments对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arrayLike = &#123;</span><br><span class=\"line\">    &apos;0&apos;: &apos;a&apos;,</span><br><span class=\"line\">    &apos;1&apos;: &apos;b&apos;,</span><br><span class=\"line\">    &apos;2&apos;: &apos;c&apos;,</span><br><span class=\"line\">    length: 3</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// ES5的写法</span><br><span class=\"line\">var arr1 = [].slice.call(arrayLike); // [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">// ES6的写法</span><br><span class=\"line\">let arr2 = Array.from(arrayLike); // [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Array-of\"><a href=\"#Array-of\" class=\"headerlink\" title=\"Array.of()\"></a>Array.of()</h3><p>Array.of方法将一组值转化为数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.of(1,11,3) //[1,11,3]</span><br><span class=\"line\">Array.of() //[]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数组实例的find和findIndex\"><a href=\"#数组实例的find和findIndex\" class=\"headerlink\" title=\"数组实例的find和findIndex\"></a>数组实例的find和findIndex</h3><p>数组实例的find方法，用于找出第一个符合条件的数组成员，他的参数是一个回调函数，若没有返回则为undefined<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1,3,-5,18].find((n) =&gt; n &lt; 0) //-5</span><br><span class=\"line\">[1,5,10,15].find(function(value, index, arr)&#123;</span><br><span class=\"line\">    return value &gt; 9</span><br><span class=\"line\">&#125;) //2</span><br></pre></td></tr></table></figure></p>\n<p>findIndex同上</p>\n<h3 id=\"数组实例的fill\"><a href=\"#数组实例的fill\" class=\"headerlink\" title=\"数组实例的fill\"></a>数组实例的fill</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;].fill(7)</span><br><span class=\"line\">// [7, 7, 7]</span><br><span class=\"line\"></span><br><span class=\"line\">new Array(3).fill(7)</span><br><span class=\"line\">// [7, 7, 7]</span><br><span class=\"line\">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;].fill(7, 1, 2)</span><br><span class=\"line\">// [&apos;a&apos;, 7, &apos;c&apos;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组实例的-entries-，keys-和-values\"><a href=\"#数组实例的-entries-，keys-和-values\" class=\"headerlink\" title=\"数组实例的 entries()，keys() 和 values()\"></a>数组实例的 entries()，keys() 和 values()</h3><p>ES6 提供三个新的方法——entries()，keys()和values()——用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章），可以用for…of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (let index of [&apos;a&apos;, &apos;b&apos;].keys()) &#123;</span><br><span class=\"line\">  console.log(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 0</span><br><span class=\"line\">// 1</span><br><span class=\"line\"></span><br><span class=\"line\">for (let elem of [&apos;a&apos;, &apos;b&apos;].values()) &#123;</span><br><span class=\"line\">  console.log(elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// &apos;a&apos;</span><br><span class=\"line\">// &apos;b&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">for (let [index, elem] of [&apos;a&apos;, &apos;b&apos;].entries()) &#123;</span><br><span class=\"line\">  console.log(index, elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 0 &quot;a&quot;</span><br><span class=\"line\">// 1 &quot;b&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-prototype-includes\"><a href=\"#Array-prototype-includes\" class=\"headerlink\" title=\"Array.prototype.includes\"></a>Array.prototype.includes</h3><p>Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。ES2016 引入了该方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, 3].includes(2)     // true</span><br><span class=\"line\">[1, 2, 3].includes(4)     // false</span><br><span class=\"line\">[1, 2, NaN].includes(NaN) // true</span><br></pre></td></tr></table></figure>\n<p>该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, 3].includes(3, 3);  // false</span><br><span class=\"line\">[1, 2, 3].includes(3, -1); // true</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数组实例的-flat-，flatMap\"><a href=\"#数组实例的-flat-，flatMap\" class=\"headerlink\" title=\"数组实例的 flat()，flatMap()\"></a>数组实例的 flat()，flatMap()</h3><p>数组的成员有时还是数组，Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, [3, 4]].flat()</span><br><span class=\"line\">// [1, 2, 3, 4]</span><br></pre></td></tr></table></figure></p>\n<p>flat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, [3, [4, 5]]].flat()</span><br><span class=\"line\">// [1, 2, 3, [4, 5]]</span><br><span class=\"line\"></span><br><span class=\"line\">[1, 2, [3, [4, 5]]].flat(2)</span><br><span class=\"line\">// [1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure></p>\n<p>如果不管有多少层嵌套，都要转成一维数组，可以用Infinity关键字作为参数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, [2, [3]]].flat(Infinity)</span><br><span class=\"line\">// [1, 2, 3]</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"es6数组\"><a href=\"#es6数组\" class=\"headerlink\" title=\"es6数组\"></a><center>es6数组</center></h2><h3 id=\"1-扩展运算符\"><a href=\"#1-扩展运算符\" class=\"headerlink\" title=\"1.扩展运算符\"></a>1.扩展运算符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(...[1,2,3]) //1,2,3</span><br><span class=\"line\">console.log(1, ...[2,3,4],5)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>取代apply的例子</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ES5: Math.max.apply(null, [14,3,3])</span><br><span class=\"line\">ES6: Math.max(...[14,3,37])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>另一个数组push的例子</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr1 = [0,1,2]</span><br><span class=\"line\">var arr2 = [3,4,5]</span><br><span class=\"line\">Array.prototype.push.apply(arr1, arr2)</span><br><span class=\"line\">ES6: arr1.push(...arr2)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>扩展运算符的应用<br>1.复制数组</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a1 = [1,2]</span><br><span class=\"line\">const a2 = a1</span><br><span class=\"line\">a2[0] = 2</span><br><span class=\"line\">a1 //[2,2,]</span><br></pre></td></tr></table></figure>\n<p>上述代码中，a2并不是数组a1的克隆，而是指向同一份数据的指针，修改a2，那么a1也会变化，es5的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a1 = [1,2]</span><br><span class=\"line\">cosnta a2 = a1.contact()</span><br><span class=\"line\">a2[0] = 2</span><br><span class=\"line\">a1 //[1,2]</span><br></pre></td></tr></table></figure></p>\n<p>上述代码中a1会返回原数组的克隆，再修改a2就不会对a1产生影响，对于es6的写法如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a1 = [1,2]</span><br><span class=\"line\">const a2 = [...a1]</span><br></pre></td></tr></table></figure></p>\n<p>2.合并数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr1 = [&apos;a&apos;, &apos;b&apos;]</span><br><span class=\"line\">const arr2 = [&apos;c&apos;]</span><br><span class=\"line\">const arr3 = [&apos;d&apos;, &apos;e&apos;]</span><br><span class=\"line\">es5合并: arr1.contanct(arr2,arr3)</span><br><span class=\"line\">es6合并: [...arr1,...arr2,...arr3]</span><br></pre></td></tr></table></figure>\n<p>但是上述方法均是浅拷贝，如果修改了原数组的变量，那么会同步映射到新的合并的数组。</p>\n<p>3.与解构赋值结合<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [first, ...rest] = [1,2,3,4,5]</span><br><span class=\"line\">first //1</span><br><span class=\"line\">rest //[2,3,4,5]</span><br><span class=\"line\">const [first, ...rest] = []</span><br><span class=\"line\">first //undefined</span><br><span class=\"line\">rest //[]</span><br><span class=\"line\">const [first, ...rest] = [&apos;foo&apos;]</span><br><span class=\"line\">first //&apos;foo&apos;</span><br><span class=\"line\">rest //[]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-Array-from\"><a href=\"#2-Array-from\" class=\"headerlink\" title=\"2.Array.from()\"></a>2.Array.from()</h3><p>Array.from方法用于将两类对象转化为真正的数组：类数组对象(array-like object)和可遍历对象(iterable)，类数组对象是指可以通过索引访问元素，并且拥有length属性，但是没有数组的其他方法，如push，forEach，indexOf。常见的像字典，DOM操作返回的NodeList,以及函数内部的arguments对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arrayLike = &#123;</span><br><span class=\"line\">    &apos;0&apos;: &apos;a&apos;,</span><br><span class=\"line\">    &apos;1&apos;: &apos;b&apos;,</span><br><span class=\"line\">    &apos;2&apos;: &apos;c&apos;,</span><br><span class=\"line\">    length: 3</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// ES5的写法</span><br><span class=\"line\">var arr1 = [].slice.call(arrayLike); // [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">// ES6的写法</span><br><span class=\"line\">let arr2 = Array.from(arrayLike); // [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Array-of\"><a href=\"#Array-of\" class=\"headerlink\" title=\"Array.of()\"></a>Array.of()</h3><p>Array.of方法将一组值转化为数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.of(1,11,3) //[1,11,3]</span><br><span class=\"line\">Array.of() //[]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数组实例的find和findIndex\"><a href=\"#数组实例的find和findIndex\" class=\"headerlink\" title=\"数组实例的find和findIndex\"></a>数组实例的find和findIndex</h3><p>数组实例的find方法，用于找出第一个符合条件的数组成员，他的参数是一个回调函数，若没有返回则为undefined<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1,3,-5,18].find((n) =&gt; n &lt; 0) //-5</span><br><span class=\"line\">[1,5,10,15].find(function(value, index, arr)&#123;</span><br><span class=\"line\">    return value &gt; 9</span><br><span class=\"line\">&#125;) //2</span><br></pre></td></tr></table></figure></p>\n<p>findIndex同上</p>\n<h3 id=\"数组实例的fill\"><a href=\"#数组实例的fill\" class=\"headerlink\" title=\"数组实例的fill\"></a>数组实例的fill</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;].fill(7)</span><br><span class=\"line\">// [7, 7, 7]</span><br><span class=\"line\"></span><br><span class=\"line\">new Array(3).fill(7)</span><br><span class=\"line\">// [7, 7, 7]</span><br><span class=\"line\">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;].fill(7, 1, 2)</span><br><span class=\"line\">// [&apos;a&apos;, 7, &apos;c&apos;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组实例的-entries-，keys-和-values\"><a href=\"#数组实例的-entries-，keys-和-values\" class=\"headerlink\" title=\"数组实例的 entries()，keys() 和 values()\"></a>数组实例的 entries()，keys() 和 values()</h3><p>ES6 提供三个新的方法——entries()，keys()和values()——用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章），可以用for…of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (let index of [&apos;a&apos;, &apos;b&apos;].keys()) &#123;</span><br><span class=\"line\">  console.log(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 0</span><br><span class=\"line\">// 1</span><br><span class=\"line\"></span><br><span class=\"line\">for (let elem of [&apos;a&apos;, &apos;b&apos;].values()) &#123;</span><br><span class=\"line\">  console.log(elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// &apos;a&apos;</span><br><span class=\"line\">// &apos;b&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">for (let [index, elem] of [&apos;a&apos;, &apos;b&apos;].entries()) &#123;</span><br><span class=\"line\">  console.log(index, elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 0 &quot;a&quot;</span><br><span class=\"line\">// 1 &quot;b&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-prototype-includes\"><a href=\"#Array-prototype-includes\" class=\"headerlink\" title=\"Array.prototype.includes\"></a>Array.prototype.includes</h3><p>Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。ES2016 引入了该方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, 3].includes(2)     // true</span><br><span class=\"line\">[1, 2, 3].includes(4)     // false</span><br><span class=\"line\">[1, 2, NaN].includes(NaN) // true</span><br></pre></td></tr></table></figure>\n<p>该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, 3].includes(3, 3);  // false</span><br><span class=\"line\">[1, 2, 3].includes(3, -1); // true</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数组实例的-flat-，flatMap\"><a href=\"#数组实例的-flat-，flatMap\" class=\"headerlink\" title=\"数组实例的 flat()，flatMap()\"></a>数组实例的 flat()，flatMap()</h3><p>数组的成员有时还是数组，Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, [3, 4]].flat()</span><br><span class=\"line\">// [1, 2, 3, 4]</span><br></pre></td></tr></table></figure></p>\n<p>flat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, [3, [4, 5]]].flat()</span><br><span class=\"line\">// [1, 2, 3, [4, 5]]</span><br><span class=\"line\"></span><br><span class=\"line\">[1, 2, [3, [4, 5]]].flat(2)</span><br><span class=\"line\">// [1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure></p>\n<p>如果不管有多少层嵌套，都要转成一维数组，可以用Infinity关键字作为参数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, [2, [3]]].flat(Infinity)</span><br><span class=\"line\">// [1, 2, 3]</span><br></pre></td></tr></table></figure></p>\n"},{"title":"docker部署记录文件","date":"2018-12-09T02:33:09.000Z","_content":"docker部署记录\n\n1.文件位置 /var/www/powerpred    \n\n2.收集静态文件位置 /var/www/static\n\n3.80占用? netstat -ano | grep 80找到，kill掉pid\n4 进入container \n```\ndocker run -it -p 80:80 test:v4\n```\n进入到相应的web目录\n```\npython3 manage.py runserver 0.0.0.0:8000\n```\nok，此时可以访问。\n","source":"_posts/docker部署.mkd","raw":"---\ntitle: docker部署记录文件\ndate: 2018-12-09 10:33:09\ntags: dcoker\ncategories: docker\n---\ndocker部署记录\n\n1.文件位置 /var/www/powerpred    \n\n2.收集静态文件位置 /var/www/static\n\n3.80占用? netstat -ano | grep 80找到，kill掉pid\n4 进入container \n```\ndocker run -it -p 80:80 test:v4\n```\n进入到相应的web目录\n```\npython3 manage.py runserver 0.0.0.0:8000\n```\nok，此时可以访问。\n","slug":"docker部署","published":1,"updated":"2018-12-19T03:44:36.903Z","_id":"cjpummqam0006ba72nq51sp1z","comments":1,"layout":"post","photos":[],"link":"","content":"<p>docker部署记录</p>\n<p>1.文件位置 /var/www/powerpred    </p>\n<p>2.收集静态文件位置 /var/www/static</p>\n<p>3.80占用? netstat -ano | grep 80找到，kill掉pid<br>4 进入container<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -p 80:80 test:v4</span><br></pre></td></tr></table></figure></p>\n<p>进入到相应的web目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure></p>\n<p>ok，此时可以访问。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>docker部署记录</p>\n<p>1.文件位置 /var/www/powerpred    </p>\n<p>2.收集静态文件位置 /var/www/static</p>\n<p>3.80占用? netstat -ano | grep 80找到，kill掉pid<br>4 进入container<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -p 80:80 test:v4</span><br></pre></td></tr></table></figure></p>\n<p>进入到相应的web目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure></p>\n<p>ok，此时可以访问。</p>\n"},{"title":"es6的函数","date":"2018-12-12T02:33:09.000Z","_content":"## <center>es6函数</center>\n### 1.函数的默认值\n```\nfunction log(x, y) {\n    y = y ||　'world';\n    console.log(x, y)\n}\nlog('Hello');   //Hello world\nlog('Hello', 'world');      //Hello World\nlog('hello','') //Hello world\n```\n上述缺点，在检查函数`log`的参数ｙ没有赋值，没有的话指定为world，缺点是y赋值false,就会像最后一个即使赋值为空，那么也会显示world．\n\nes6可以为参数设置默认值:\n```\nfunction log(x, y='world') {\n    this.x = x;\n    this.y = y;\n}\nlog('Hello');   //Hello world\nlog('Hello', 'world');      //Hello World\nlog('hello','') //Hello world\n```\n此外，参数变量是默认声明的，函数体内无法用let或const再次声明，否则报错.    \n\n### 2.与结构赋值相结合    \n```\nfunction foo({x ,y = 5}) {\n    console.log(x,y)\n}\nfoo({});    //undefined 5\nfoo({x: 1});    //1 5\nfoo({x: 1 ,y: 2});  1 2\nfoo()；  // x of undefined\n```\n最后一个没有为foo提供参数,所以为undefined.\n另一个例子:\n```\nfunction fetch(url, {body='', method='GET', header= {} }){\n    console.log(method);\n}\nfetch ('http://example.com', {}); //\"GET\"\nfetch ('http://example.com'); //报错\n\nfunction fetch(url, {body='', method='GET', header= {}= {} }){\n    console.log(method);\n}\n//没有第二个参数,默认值会生效\nfetch ('http://example.com'); //\"GET\"\n```\n\n\n","source":"_posts/es6函数.mkd","raw":"---\ntitle: es6的函数\ndate: 2018-12-12 10:33:09\ntags: javascript\ncategories: javascript\n---\n## <center>es6函数</center>\n### 1.函数的默认值\n```\nfunction log(x, y) {\n    y = y ||　'world';\n    console.log(x, y)\n}\nlog('Hello');   //Hello world\nlog('Hello', 'world');      //Hello World\nlog('hello','') //Hello world\n```\n上述缺点，在检查函数`log`的参数ｙ没有赋值，没有的话指定为world，缺点是y赋值false,就会像最后一个即使赋值为空，那么也会显示world．\n\nes6可以为参数设置默认值:\n```\nfunction log(x, y='world') {\n    this.x = x;\n    this.y = y;\n}\nlog('Hello');   //Hello world\nlog('Hello', 'world');      //Hello World\nlog('hello','') //Hello world\n```\n此外，参数变量是默认声明的，函数体内无法用let或const再次声明，否则报错.    \n\n### 2.与结构赋值相结合    \n```\nfunction foo({x ,y = 5}) {\n    console.log(x,y)\n}\nfoo({});    //undefined 5\nfoo({x: 1});    //1 5\nfoo({x: 1 ,y: 2});  1 2\nfoo()；  // x of undefined\n```\n最后一个没有为foo提供参数,所以为undefined.\n另一个例子:\n```\nfunction fetch(url, {body='', method='GET', header= {} }){\n    console.log(method);\n}\nfetch ('http://example.com', {}); //\"GET\"\nfetch ('http://example.com'); //报错\n\nfunction fetch(url, {body='', method='GET', header= {}= {} }){\n    console.log(method);\n}\n//没有第二个参数,默认值会生效\nfetch ('http://example.com'); //\"GET\"\n```\n\n\n","slug":"es6函数","published":1,"updated":"2018-12-19T03:44:42.623Z","_id":"cjpummqan0007ba72g5e8atdi","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"es6函数\"><a href=\"#es6函数\" class=\"headerlink\" title=\"es6函数\"></a><center>es6函数</center></h2><h3 id=\"1-函数的默认值\"><a href=\"#1-函数的默认值\" class=\"headerlink\" title=\"1.函数的默认值\"></a>1.函数的默认值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function log(x, y) &#123;</span><br><span class=\"line\">    y = y ||　&apos;world&apos;;</span><br><span class=\"line\">    console.log(x, y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log(&apos;Hello&apos;);   //Hello world</span><br><span class=\"line\">log(&apos;Hello&apos;, &apos;world&apos;);      //Hello World</span><br><span class=\"line\">log(&apos;hello&apos;,&apos;&apos;) //Hello world</span><br></pre></td></tr></table></figure>\n<p>上述缺点，在检查函数<code>log</code>的参数ｙ没有赋值，没有的话指定为world，缺点是y赋值false,就会像最后一个即使赋值为空，那么也会显示world．</p>\n<p>es6可以为参数设置默认值:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function log(x, y=&apos;world&apos;) &#123;</span><br><span class=\"line\">    this.x = x;</span><br><span class=\"line\">    this.y = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log(&apos;Hello&apos;);   //Hello world</span><br><span class=\"line\">log(&apos;Hello&apos;, &apos;world&apos;);      //Hello World</span><br><span class=\"line\">log(&apos;hello&apos;,&apos;&apos;) //Hello world</span><br></pre></td></tr></table></figure></p>\n<p>此外，参数变量是默认声明的，函数体内无法用let或const再次声明，否则报错.    </p>\n<h3 id=\"2-与结构赋值相结合\"><a href=\"#2-与结构赋值相结合\" class=\"headerlink\" title=\"2.与结构赋值相结合\"></a>2.与结构赋值相结合</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(&#123;x ,y = 5&#125;) &#123;</span><br><span class=\"line\">    console.log(x,y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(&#123;&#125;);    //undefined 5</span><br><span class=\"line\">foo(&#123;x: 1&#125;);    //1 5</span><br><span class=\"line\">foo(&#123;x: 1 ,y: 2&#125;);  1 2</span><br><span class=\"line\">foo()；  // x of undefined</span><br></pre></td></tr></table></figure>\n<p>最后一个没有为foo提供参数,所以为undefined.<br>另一个例子:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fetch(url, &#123;body=&apos;&apos;, method=&apos;GET&apos;, header= &#123;&#125; &#125;)&#123;</span><br><span class=\"line\">    console.log(method);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fetch (&apos;http://example.com&apos;, &#123;&#125;); //&quot;GET&quot;</span><br><span class=\"line\">fetch (&apos;http://example.com&apos;); //报错</span><br><span class=\"line\"></span><br><span class=\"line\">function fetch(url, &#123;body=&apos;&apos;, method=&apos;GET&apos;, header= &#123;&#125;= &#123;&#125; &#125;)&#123;</span><br><span class=\"line\">    console.log(method);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//没有第二个参数,默认值会生效</span><br><span class=\"line\">fetch (&apos;http://example.com&apos;); //&quot;GET&quot;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"es6函数\"><a href=\"#es6函数\" class=\"headerlink\" title=\"es6函数\"></a><center>es6函数</center></h2><h3 id=\"1-函数的默认值\"><a href=\"#1-函数的默认值\" class=\"headerlink\" title=\"1.函数的默认值\"></a>1.函数的默认值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function log(x, y) &#123;</span><br><span class=\"line\">    y = y ||　&apos;world&apos;;</span><br><span class=\"line\">    console.log(x, y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log(&apos;Hello&apos;);   //Hello world</span><br><span class=\"line\">log(&apos;Hello&apos;, &apos;world&apos;);      //Hello World</span><br><span class=\"line\">log(&apos;hello&apos;,&apos;&apos;) //Hello world</span><br></pre></td></tr></table></figure>\n<p>上述缺点，在检查函数<code>log</code>的参数ｙ没有赋值，没有的话指定为world，缺点是y赋值false,就会像最后一个即使赋值为空，那么也会显示world．</p>\n<p>es6可以为参数设置默认值:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function log(x, y=&apos;world&apos;) &#123;</span><br><span class=\"line\">    this.x = x;</span><br><span class=\"line\">    this.y = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log(&apos;Hello&apos;);   //Hello world</span><br><span class=\"line\">log(&apos;Hello&apos;, &apos;world&apos;);      //Hello World</span><br><span class=\"line\">log(&apos;hello&apos;,&apos;&apos;) //Hello world</span><br></pre></td></tr></table></figure></p>\n<p>此外，参数变量是默认声明的，函数体内无法用let或const再次声明，否则报错.    </p>\n<h3 id=\"2-与结构赋值相结合\"><a href=\"#2-与结构赋值相结合\" class=\"headerlink\" title=\"2.与结构赋值相结合\"></a>2.与结构赋值相结合</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(&#123;x ,y = 5&#125;) &#123;</span><br><span class=\"line\">    console.log(x,y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(&#123;&#125;);    //undefined 5</span><br><span class=\"line\">foo(&#123;x: 1&#125;);    //1 5</span><br><span class=\"line\">foo(&#123;x: 1 ,y: 2&#125;);  1 2</span><br><span class=\"line\">foo()；  // x of undefined</span><br></pre></td></tr></table></figure>\n<p>最后一个没有为foo提供参数,所以为undefined.<br>另一个例子:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fetch(url, &#123;body=&apos;&apos;, method=&apos;GET&apos;, header= &#123;&#125; &#125;)&#123;</span><br><span class=\"line\">    console.log(method);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fetch (&apos;http://example.com&apos;, &#123;&#125;); //&quot;GET&quot;</span><br><span class=\"line\">fetch (&apos;http://example.com&apos;); //报错</span><br><span class=\"line\"></span><br><span class=\"line\">function fetch(url, &#123;body=&apos;&apos;, method=&apos;GET&apos;, header= &#123;&#125;= &#123;&#125; &#125;)&#123;</span><br><span class=\"line\">    console.log(method);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//没有第二个参数,默认值会生效</span><br><span class=\"line\">fetch (&apos;http://example.com&apos;); //&quot;GET&quot;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-12-19T02:18:44.394Z","updated":"2018-12-19T02:18:44.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpummqar000aba72x0us0khb","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"es6的promise函数","date":"2018-12-18T02:33:09.000Z","_content":"\n## <center>promise</center>\npromise是异步编程的一种解决方案，比起传统的解决方案--回调函数和事件更合理和强大。    \n所谓promise，简单的说是一个容器，里面保存着未来才会结束的事件(通常是一个异步操作)    \npromise的特点:\n- 对象的状态不受外界影响，promise对象代表一个异步操作，有三种状态:pending(进行中),fulfilled(已成功),rejected(已失效)。只有异步操作的结果可以决定当前是哪一种状态，任何其他操作无法改变这个状态。这也是promise的由来。\n- 一旦状态改变，就不会再变，任何时候都可以得到这个结果，promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变成rejected。只要这两种状态发生，状态就凝固了，不会再变了，会一直保持这个结果，这个结果就成为resolved(已定型)。如果改变已经发生了，你在对promise添加回调函数，也会立即得到这个结果。这与事件Event不同，事件的特点是如果你错过了它，再去监听，是得不到结果的。\n- promise也有一些缺点，首先取消promise，一旦建立就会立即执行，无法中途取消，其次如果不设置回调函数，promise内部抛出的错误不会反映到外部，第三，当初与oending状态，无法得知目前处于哪一个阶段(刚刚开始还是即将完成)\n\n### 基本用法\n```\nconst promise = new Promise(function(resolve, reject){\n    //...some code\n    if(/* 异步操作成功 */){\n        resolve(value)\n    } else {\n        reject(error)\n    }\n})\n```\nresolve的作用是，将promise的对象从状态pending变为resolved，在异步操作成功时候调用，并将异步操作的结果作为参数传递出去；reject的作用是，再promise的状态由pending变为rejectd，在异步操作失败时候调用，并将异步操作的报出的错误，作为参数传递出去。   \npromise实例生成以后，可以用then方法分别指定resolved和rejected状态的回调函数。    \n```\npromise.then(function(value){\n    //success\n    },function(error){\n    //failure\n    })\n```\npromise实例生成以后，可以接受两个回调函数作为参数，第一个回调函数是promise对象变为resolved时候调用，第二个是回调函数是promise变为reject时调用，第二个函数是可选的的，二者均接受promise对象传出的值作为参数。    \n例子：\n```\nfunction timeout(ms){\n    return new Promise((resolve, reject) => {\n        setTimeout(resolve, ms, 'done')\n    });\n}\ntimeout(100).then((value) => {\n    console.log(value)\n})\n```\n上述代码中timeout方法返回了一个promise实例，表示一段时间才会发生的结果，过了指定的时间，promise的实例状态变为resolved，就会触发then方法绑定的回调函数。\n继续举例\n```\nlet promise = new Promise((resolve, reject) => {\n    console.log('promise');\n    resolve();\n})\npromise.then(function() {\n    console.log('resolved')\n})\nconsole.log('xxxx')\n输出结果:\n// promise\n// xxxx\n// resolved\n```\n上述代码中，promise建立后立即执行，首先输出promise，然后，.then方法指定的回调函数，将在当前脚本所有的同步任务执行完才会执行，所以resolved最后输出。\n继续举例：\n```\nfunction loadImage(url){\n    retutn new Promise(function(resolve, reject) {\n        const image = new Image();\n        image.onload = function() {\n            resolve(image)\n        }\n        image.onerror = function() {\n            reject(new Error('could not load image at' + url))\n        }\n        image.src = url\n    })\n}\n```\n异步加载图片，如果加载成功，则调用resolve方法，否则调用reject方法\n\n多个promise的实例：\n```\nconst p1 = new Promise(function(resolve, reject) {\n    setTimeout(()=>{\n        reject(new Error('fail'), 3000)\n    })\n})\nconst p2 = new Promise(function(resolve, reject) {\n    setTimeout(() => {\n        resolve(p1), 1000\n    })\n})\np2.then(result => console.log(result))\n    .catch(error => console.log(error))\n//Error: fail\n```\n### .then方法，链式调用\n```\ngetJson(\"/posts.json\").then(\n    post => getJson(post.commentURL)\n).then(\n    comments => console.log('resolved:',comments)\n    err => console.log('reject:',err)\n)\n```\n上面是链式调用，从/post.json获取数据，成功后再用getJosn函数获取comment的url传入第二个.then作为参数，成功则打印评论，失误则打印错误。一般来说用catch方法捕获错误。\n```\nconst promise = new Promise(function(resolve, reject) {\n    throw new Error('test')\n})\npromise.catch((error) => {\n    console.log(error)\n})\n```\npromise会吃掉内部的错误，例子如下：\n```\nconst someAsyncThing = function() {\n    return new Promise((resolve, reject) => {\n        //这里x并没有定义\n        resolve (x+2)\n    })\n}\nsomeAsyncThing()\n.catch( (error) => {\n    console.log(error)\n})\n.then(() => {\n    console.log('carry on')\n})\n//ReferenceError: x is not defined\n    at Promise (<anonymous>:4:18)\n    at new Promise (<anonymous>)\n    at someAsyncThing (<anonymous>:2:12)\n    at <anonymous>:7:1\nVM193:12 carry on\n```\n这里在X没有定义的情况下，首先捕捉了错误，即使x未定义仍然运行.then函数输出了carry on \n\n\n### Promise.finally\nfinally 指定不敢Pormise的对象最后的结果如何，都会执行的操作\n```\npromise\n.then(result => {..})\n.catch(result => {...})\n.finally(result => {...})\n```\n\n### Promise.all\npromise.all方法讲对个promise实例，包装成一个promise实例。\n```\nconst p = Promise.all([p1, p2, p3])\n```\n上面代码中，promise会接受一个数组作为参数，p1, p2, p3都是Promise的实例，promise.all的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise的实例。\np的状态有p1,p2,p3确定：    \n- 只有p1, p2, p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1, p2, p3的返回值组成一个数组，作为参数传递给p的回调函数。\n- 只要p1, p2, p3有一个被reject，p的状态则变为reject，此时第一个被reject的返回值会作为参数，传递给p的回调函数。\n具体例子如下：\n```\n//这里并不觉得是6个promise的实例\nconst promises = [2,3,5,6,11,13].map(function(id) {\n    return getJson('/post/' + id + '.json')\n})\nPromise.all(promises).then( (posts) => {\n    .....\n}).catch((error) => {\n    .....\n})\n\n```\n再举个栗子更好理解的:\n```\nconst databasePromise = connectDatabase();\nconst booksPromise = databasePromise\n    ,then(findAllBook)\nconst userPromise = databasePromise\n    .then(getCurrentUser)\nPromise.all([bookPromise, userPromise])\n    .then(([book, user]) => {\n        pickTopRecommentaction(book, user)\n    })\n```\n这里，bookPromise和userPromise是两个异步操作，只有等到他们的结果都返回了，才会去执行pickTopRecommentaction这个回调函数。需要注意的如果作为参数的promise的实例被reject了，那么不会触发Promise.all的catch方法。\n例子：\n```\nconst p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result)\n.catch(e => e);\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.then(result => result)\n.catch(e => e);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// [\"hello\", Error: 报错了]\n```\n上面代码中，p1会resolved，p2首先会rejected，但是p2有自己的catch方法，该方法返回的是一个新的 Promise 实例，p2指向的实际上是这个实例。该实例执行完catch方法后，也会变成resolved，导致Promise.all()方法参数里面的两个实例都会resolved，因此会调用then方法指定的回调函数，而不会调用catch方法指定的回调函数。    \n若p2未定义catch方法：\n```\nconst p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result);\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.then(result => result);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// Error: 报错了\n```\n首先，p2会reject，所以reject的返回值会作为参数给Promise.all，同事调用Promise.all的catch方法。\n\n### Promise.race\nconst p = Promise.race([p1, p2, p3])\n上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。\n\nPromise.race方法的参数与Promise.all方法一样，如果不是 Promise 实例，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。\n\n下面是一个例子，如果指定时间内没有获得结果，就将 Promise 的状态变为reject，否则变为resolve。\n```\nconst p = Promise.race([\n  fetch('/resource-that-may-take-a-while'),\n  new Promise(function (resolve, reject) {\n    setTimeout(() => reject(new Error('request timeout')), 5000)\n  })\n]);\n\np\n.then(console.log)\n.catch(console.error);\n```\n","source":"_posts/promise.mkd","raw":"---\ntitle: es6的promise函数\ndate: 2018-12-18 10:33:09\ntags: javascript\ncategories: javascript\n---\n\n## <center>promise</center>\npromise是异步编程的一种解决方案，比起传统的解决方案--回调函数和事件更合理和强大。    \n所谓promise，简单的说是一个容器，里面保存着未来才会结束的事件(通常是一个异步操作)    \npromise的特点:\n- 对象的状态不受外界影响，promise对象代表一个异步操作，有三种状态:pending(进行中),fulfilled(已成功),rejected(已失效)。只有异步操作的结果可以决定当前是哪一种状态，任何其他操作无法改变这个状态。这也是promise的由来。\n- 一旦状态改变，就不会再变，任何时候都可以得到这个结果，promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变成rejected。只要这两种状态发生，状态就凝固了，不会再变了，会一直保持这个结果，这个结果就成为resolved(已定型)。如果改变已经发生了，你在对promise添加回调函数，也会立即得到这个结果。这与事件Event不同，事件的特点是如果你错过了它，再去监听，是得不到结果的。\n- promise也有一些缺点，首先取消promise，一旦建立就会立即执行，无法中途取消，其次如果不设置回调函数，promise内部抛出的错误不会反映到外部，第三，当初与oending状态，无法得知目前处于哪一个阶段(刚刚开始还是即将完成)\n\n### 基本用法\n```\nconst promise = new Promise(function(resolve, reject){\n    //...some code\n    if(/* 异步操作成功 */){\n        resolve(value)\n    } else {\n        reject(error)\n    }\n})\n```\nresolve的作用是，将promise的对象从状态pending变为resolved，在异步操作成功时候调用，并将异步操作的结果作为参数传递出去；reject的作用是，再promise的状态由pending变为rejectd，在异步操作失败时候调用，并将异步操作的报出的错误，作为参数传递出去。   \npromise实例生成以后，可以用then方法分别指定resolved和rejected状态的回调函数。    \n```\npromise.then(function(value){\n    //success\n    },function(error){\n    //failure\n    })\n```\npromise实例生成以后，可以接受两个回调函数作为参数，第一个回调函数是promise对象变为resolved时候调用，第二个是回调函数是promise变为reject时调用，第二个函数是可选的的，二者均接受promise对象传出的值作为参数。    \n例子：\n```\nfunction timeout(ms){\n    return new Promise((resolve, reject) => {\n        setTimeout(resolve, ms, 'done')\n    });\n}\ntimeout(100).then((value) => {\n    console.log(value)\n})\n```\n上述代码中timeout方法返回了一个promise实例，表示一段时间才会发生的结果，过了指定的时间，promise的实例状态变为resolved，就会触发then方法绑定的回调函数。\n继续举例\n```\nlet promise = new Promise((resolve, reject) => {\n    console.log('promise');\n    resolve();\n})\npromise.then(function() {\n    console.log('resolved')\n})\nconsole.log('xxxx')\n输出结果:\n// promise\n// xxxx\n// resolved\n```\n上述代码中，promise建立后立即执行，首先输出promise，然后，.then方法指定的回调函数，将在当前脚本所有的同步任务执行完才会执行，所以resolved最后输出。\n继续举例：\n```\nfunction loadImage(url){\n    retutn new Promise(function(resolve, reject) {\n        const image = new Image();\n        image.onload = function() {\n            resolve(image)\n        }\n        image.onerror = function() {\n            reject(new Error('could not load image at' + url))\n        }\n        image.src = url\n    })\n}\n```\n异步加载图片，如果加载成功，则调用resolve方法，否则调用reject方法\n\n多个promise的实例：\n```\nconst p1 = new Promise(function(resolve, reject) {\n    setTimeout(()=>{\n        reject(new Error('fail'), 3000)\n    })\n})\nconst p2 = new Promise(function(resolve, reject) {\n    setTimeout(() => {\n        resolve(p1), 1000\n    })\n})\np2.then(result => console.log(result))\n    .catch(error => console.log(error))\n//Error: fail\n```\n### .then方法，链式调用\n```\ngetJson(\"/posts.json\").then(\n    post => getJson(post.commentURL)\n).then(\n    comments => console.log('resolved:',comments)\n    err => console.log('reject:',err)\n)\n```\n上面是链式调用，从/post.json获取数据，成功后再用getJosn函数获取comment的url传入第二个.then作为参数，成功则打印评论，失误则打印错误。一般来说用catch方法捕获错误。\n```\nconst promise = new Promise(function(resolve, reject) {\n    throw new Error('test')\n})\npromise.catch((error) => {\n    console.log(error)\n})\n```\npromise会吃掉内部的错误，例子如下：\n```\nconst someAsyncThing = function() {\n    return new Promise((resolve, reject) => {\n        //这里x并没有定义\n        resolve (x+2)\n    })\n}\nsomeAsyncThing()\n.catch( (error) => {\n    console.log(error)\n})\n.then(() => {\n    console.log('carry on')\n})\n//ReferenceError: x is not defined\n    at Promise (<anonymous>:4:18)\n    at new Promise (<anonymous>)\n    at someAsyncThing (<anonymous>:2:12)\n    at <anonymous>:7:1\nVM193:12 carry on\n```\n这里在X没有定义的情况下，首先捕捉了错误，即使x未定义仍然运行.then函数输出了carry on \n\n\n### Promise.finally\nfinally 指定不敢Pormise的对象最后的结果如何，都会执行的操作\n```\npromise\n.then(result => {..})\n.catch(result => {...})\n.finally(result => {...})\n```\n\n### Promise.all\npromise.all方法讲对个promise实例，包装成一个promise实例。\n```\nconst p = Promise.all([p1, p2, p3])\n```\n上面代码中，promise会接受一个数组作为参数，p1, p2, p3都是Promise的实例，promise.all的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise的实例。\np的状态有p1,p2,p3确定：    \n- 只有p1, p2, p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1, p2, p3的返回值组成一个数组，作为参数传递给p的回调函数。\n- 只要p1, p2, p3有一个被reject，p的状态则变为reject，此时第一个被reject的返回值会作为参数，传递给p的回调函数。\n具体例子如下：\n```\n//这里并不觉得是6个promise的实例\nconst promises = [2,3,5,6,11,13].map(function(id) {\n    return getJson('/post/' + id + '.json')\n})\nPromise.all(promises).then( (posts) => {\n    .....\n}).catch((error) => {\n    .....\n})\n\n```\n再举个栗子更好理解的:\n```\nconst databasePromise = connectDatabase();\nconst booksPromise = databasePromise\n    ,then(findAllBook)\nconst userPromise = databasePromise\n    .then(getCurrentUser)\nPromise.all([bookPromise, userPromise])\n    .then(([book, user]) => {\n        pickTopRecommentaction(book, user)\n    })\n```\n这里，bookPromise和userPromise是两个异步操作，只有等到他们的结果都返回了，才会去执行pickTopRecommentaction这个回调函数。需要注意的如果作为参数的promise的实例被reject了，那么不会触发Promise.all的catch方法。\n例子：\n```\nconst p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result)\n.catch(e => e);\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.then(result => result)\n.catch(e => e);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// [\"hello\", Error: 报错了]\n```\n上面代码中，p1会resolved，p2首先会rejected，但是p2有自己的catch方法，该方法返回的是一个新的 Promise 实例，p2指向的实际上是这个实例。该实例执行完catch方法后，也会变成resolved，导致Promise.all()方法参数里面的两个实例都会resolved，因此会调用then方法指定的回调函数，而不会调用catch方法指定的回调函数。    \n若p2未定义catch方法：\n```\nconst p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result);\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.then(result => result);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// Error: 报错了\n```\n首先，p2会reject，所以reject的返回值会作为参数给Promise.all，同事调用Promise.all的catch方法。\n\n### Promise.race\nconst p = Promise.race([p1, p2, p3])\n上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。\n\nPromise.race方法的参数与Promise.all方法一样，如果不是 Promise 实例，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。\n\n下面是一个例子，如果指定时间内没有获得结果，就将 Promise 的状态变为reject，否则变为resolve。\n```\nconst p = Promise.race([\n  fetch('/resource-that-may-take-a-while'),\n  new Promise(function (resolve, reject) {\n    setTimeout(() => reject(new Error('request timeout')), 5000)\n  })\n]);\n\np\n.then(console.log)\n.catch(console.error);\n```\n","slug":"promise","published":1,"updated":"2018-12-19T03:44:56.951Z","_id":"cjpummqas000cba727b6u3vlm","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"promise\"><a href=\"#promise\" class=\"headerlink\" title=\"promise\"></a><center>promise</center></h2><p>promise是异步编程的一种解决方案，比起传统的解决方案–回调函数和事件更合理和强大。<br>所谓promise，简单的说是一个容器，里面保存着未来才会结束的事件(通常是一个异步操作)<br>promise的特点:</p>\n<ul>\n<li>对象的状态不受外界影响，promise对象代表一个异步操作，有三种状态:pending(进行中),fulfilled(已成功),rejected(已失效)。只有异步操作的结果可以决定当前是哪一种状态，任何其他操作无法改变这个状态。这也是promise的由来。</li>\n<li>一旦状态改变，就不会再变，任何时候都可以得到这个结果，promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变成rejected。只要这两种状态发生，状态就凝固了，不会再变了，会一直保持这个结果，这个结果就成为resolved(已定型)。如果改变已经发生了，你在对promise添加回调函数，也会立即得到这个结果。这与事件Event不同，事件的特点是如果你错过了它，再去监听，是得不到结果的。</li>\n<li>promise也有一些缺点，首先取消promise，一旦建立就会立即执行，无法中途取消，其次如果不设置回调函数，promise内部抛出的错误不会反映到外部，第三，当初与oending状态，无法得知目前处于哪一个阶段(刚刚开始还是即将完成)</li>\n</ul>\n<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const promise = new Promise(function(resolve, reject)&#123;</span><br><span class=\"line\">    //...some code</span><br><span class=\"line\">    if(/* 异步操作成功 */)&#123;</span><br><span class=\"line\">        resolve(value)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        reject(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>resolve的作用是，将promise的对象从状态pending变为resolved，在异步操作成功时候调用，并将异步操作的结果作为参数传递出去；reject的作用是，再promise的状态由pending变为rejectd，在异步操作失败时候调用，并将异步操作的报出的错误，作为参数传递出去。<br>promise实例生成以后，可以用then方法分别指定resolved和rejected状态的回调函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(function(value)&#123;</span><br><span class=\"line\">    //success</span><br><span class=\"line\">    &#125;,function(error)&#123;</span><br><span class=\"line\">    //failure</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>promise实例生成以后，可以接受两个回调函数作为参数，第一个回调函数是promise对象变为resolved时候调用，第二个是回调函数是promise变为reject时调用，第二个函数是可选的的，二者均接受promise对象传出的值作为参数。<br>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function timeout(ms)&#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">        setTimeout(resolve, ms, &apos;done&apos;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">timeout(100).then((value) =&gt; &#123;</span><br><span class=\"line\">    console.log(value)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>上述代码中timeout方法返回了一个promise实例，表示一段时间才会发生的结果，过了指定的时间，promise的实例状态变为resolved，就会触发then方法绑定的回调函数。<br>继续举例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;promise&apos;);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(function() &#123;</span><br><span class=\"line\">    console.log(&apos;resolved&apos;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(&apos;xxxx&apos;)</span><br><span class=\"line\">输出结果:</span><br><span class=\"line\">// promise</span><br><span class=\"line\">// xxxx</span><br><span class=\"line\">// resolved</span><br></pre></td></tr></table></figure></p>\n<p>上述代码中，promise建立后立即执行，首先输出promise，然后，.then方法指定的回调函数，将在当前脚本所有的同步任务执行完才会执行，所以resolved最后输出。<br>继续举例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function loadImage(url)&#123;</span><br><span class=\"line\">    retutn new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">        const image = new Image();</span><br><span class=\"line\">        image.onload = function() &#123;</span><br><span class=\"line\">            resolve(image)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        image.onerror = function() &#123;</span><br><span class=\"line\">            reject(new Error(&apos;could not load image at&apos; + url))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        image.src = url</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>异步加载图片，如果加载成功，则调用resolve方法，否则调用reject方法</p>\n<p>多个promise的实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p1 = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">    setTimeout(()=&gt;&#123;</span><br><span class=\"line\">        reject(new Error(&apos;fail&apos;), 3000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const p2 = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        resolve(p1), 1000</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p2.then(result =&gt; console.log(result))</span><br><span class=\"line\">    .catch(error =&gt; console.log(error))</span><br><span class=\"line\">//Error: fail</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"then方法，链式调用\"><a href=\"#then方法，链式调用\" class=\"headerlink\" title=\".then方法，链式调用\"></a>.then方法，链式调用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJson(&quot;/posts.json&quot;).then(</span><br><span class=\"line\">    post =&gt; getJson(post.commentURL)</span><br><span class=\"line\">).then(</span><br><span class=\"line\">    comments =&gt; console.log(&apos;resolved:&apos;,comments)</span><br><span class=\"line\">    err =&gt; console.log(&apos;reject:&apos;,err)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>上面是链式调用，从/post.json获取数据，成功后再用getJosn函数获取comment的url传入第二个.then作为参数，成功则打印评论，失误则打印错误。一般来说用catch方法捕获错误。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const promise = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">    throw new Error(&apos;test&apos;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.catch((error) =&gt; &#123;</span><br><span class=\"line\">    console.log(error)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>promise会吃掉内部的错误，例子如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const someAsyncThing = function() &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">        //这里x并没有定义</span><br><span class=\"line\">        resolve (x+2)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">someAsyncThing()</span><br><span class=\"line\">.catch( (error) =&gt; &#123;</span><br><span class=\"line\">    console.log(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(() =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;carry on&apos;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//ReferenceError: x is not defined</span><br><span class=\"line\">    at Promise (&lt;anonymous&gt;:4:18)</span><br><span class=\"line\">    at new Promise (&lt;anonymous&gt;)</span><br><span class=\"line\">    at someAsyncThing (&lt;anonymous&gt;:2:12)</span><br><span class=\"line\">    at &lt;anonymous&gt;:7:1</span><br><span class=\"line\">VM193:12 carry on</span><br></pre></td></tr></table></figure></p>\n<p>这里在X没有定义的情况下，首先捕捉了错误，即使x未定义仍然运行.then函数输出了carry on </p>\n<h3 id=\"Promise-finally\"><a href=\"#Promise-finally\" class=\"headerlink\" title=\"Promise.finally\"></a>Promise.finally</h3><p>finally 指定不敢Pormise的对象最后的结果如何，都会执行的操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise</span><br><span class=\"line\">.then(result =&gt; &#123;..&#125;)</span><br><span class=\"line\">.catch(result =&gt; &#123;...&#125;)</span><br><span class=\"line\">.finally(result =&gt; &#123;...&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p>promise.all方法讲对个promise实例，包装成一个promise实例。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p = Promise.all([p1, p2, p3])</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，promise会接受一个数组作为参数，p1, p2, p3都是Promise的实例，promise.all的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise的实例。<br>p的状态有p1,p2,p3确定：    </p>\n<ul>\n<li>只有p1, p2, p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1, p2, p3的返回值组成一个数组，作为参数传递给p的回调函数。</li>\n<li>只要p1, p2, p3有一个被reject，p的状态则变为reject，此时第一个被reject的返回值会作为参数，传递给p的回调函数。<br>具体例子如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这里并不觉得是6个promise的实例</span><br><span class=\"line\">const promises = [2,3,5,6,11,13].map(function(id) &#123;</span><br><span class=\"line\">    return getJson(&apos;/post/&apos; + id + &apos;.json&apos;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Promise.all(promises).then( (posts) =&gt; &#123;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">&#125;).catch((error) =&gt; &#123;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>再举个栗子更好理解的:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const databasePromise = connectDatabase();</span><br><span class=\"line\">const booksPromise = databasePromise</span><br><span class=\"line\">    ,then(findAllBook)</span><br><span class=\"line\">const userPromise = databasePromise</span><br><span class=\"line\">    .then(getCurrentUser)</span><br><span class=\"line\">Promise.all([bookPromise, userPromise])</span><br><span class=\"line\">    .then(([book, user]) =&gt; &#123;</span><br><span class=\"line\">        pickTopRecommentaction(book, user)</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>这里，bookPromise和userPromise是两个异步操作，只有等到他们的结果都返回了，才会去执行pickTopRecommentaction这个回调函数。需要注意的如果作为参数的promise的实例被reject了，那么不会触发Promise.all的catch方法。<br>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p1 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  resolve(&apos;hello&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(result =&gt; result)</span><br><span class=\"line\">.catch(e =&gt; e);</span><br><span class=\"line\"></span><br><span class=\"line\">const p2 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  throw new Error(&apos;报错了&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(result =&gt; result)</span><br><span class=\"line\">.catch(e =&gt; e);</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.all([p1, p2])</span><br><span class=\"line\">.then(result =&gt; console.log(result))</span><br><span class=\"line\">.catch(e =&gt; console.log(e));</span><br><span class=\"line\">// [&quot;hello&quot;, Error: 报错了]</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，p1会resolved，p2首先会rejected，但是p2有自己的catch方法，该方法返回的是一个新的 Promise 实例，p2指向的实际上是这个实例。该实例执行完catch方法后，也会变成resolved，导致Promise.all()方法参数里面的两个实例都会resolved，因此会调用then方法指定的回调函数，而不会调用catch方法指定的回调函数。<br>若p2未定义catch方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p1 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  resolve(&apos;hello&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(result =&gt; result);</span><br><span class=\"line\"></span><br><span class=\"line\">const p2 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  throw new Error(&apos;报错了&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(result =&gt; result);</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.all([p1, p2])</span><br><span class=\"line\">.then(result =&gt; console.log(result))</span><br><span class=\"line\">.catch(e =&gt; console.log(e));</span><br><span class=\"line\">// Error: 报错了</span><br></pre></td></tr></table></figure></p>\n<p>首先，p2会reject，所以reject的返回值会作为参数给Promise.all，同事调用Promise.all的catch方法。</p>\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><p>const p = Promise.race([p1, p2, p3])<br>上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</p>\n<p>Promise.race方法的参数与Promise.all方法一样，如果不是 Promise 实例，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。</p>\n<p>下面是一个例子，如果指定时间内没有获得结果，就将 Promise 的状态变为reject，否则变为resolve。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p = Promise.race([</span><br><span class=\"line\">  fetch(&apos;/resource-that-may-take-a-while&apos;),</span><br><span class=\"line\">  new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; reject(new Error(&apos;request timeout&apos;)), 5000)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">p</span><br><span class=\"line\">.then(console.log)</span><br><span class=\"line\">.catch(console.error);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"promise\"><a href=\"#promise\" class=\"headerlink\" title=\"promise\"></a><center>promise</center></h2><p>promise是异步编程的一种解决方案，比起传统的解决方案–回调函数和事件更合理和强大。<br>所谓promise，简单的说是一个容器，里面保存着未来才会结束的事件(通常是一个异步操作)<br>promise的特点:</p>\n<ul>\n<li>对象的状态不受外界影响，promise对象代表一个异步操作，有三种状态:pending(进行中),fulfilled(已成功),rejected(已失效)。只有异步操作的结果可以决定当前是哪一种状态，任何其他操作无法改变这个状态。这也是promise的由来。</li>\n<li>一旦状态改变，就不会再变，任何时候都可以得到这个结果，promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变成rejected。只要这两种状态发生，状态就凝固了，不会再变了，会一直保持这个结果，这个结果就成为resolved(已定型)。如果改变已经发生了，你在对promise添加回调函数，也会立即得到这个结果。这与事件Event不同，事件的特点是如果你错过了它，再去监听，是得不到结果的。</li>\n<li>promise也有一些缺点，首先取消promise，一旦建立就会立即执行，无法中途取消，其次如果不设置回调函数，promise内部抛出的错误不会反映到外部，第三，当初与oending状态，无法得知目前处于哪一个阶段(刚刚开始还是即将完成)</li>\n</ul>\n<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const promise = new Promise(function(resolve, reject)&#123;</span><br><span class=\"line\">    //...some code</span><br><span class=\"line\">    if(/* 异步操作成功 */)&#123;</span><br><span class=\"line\">        resolve(value)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        reject(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>resolve的作用是，将promise的对象从状态pending变为resolved，在异步操作成功时候调用，并将异步操作的结果作为参数传递出去；reject的作用是，再promise的状态由pending变为rejectd，在异步操作失败时候调用，并将异步操作的报出的错误，作为参数传递出去。<br>promise实例生成以后，可以用then方法分别指定resolved和rejected状态的回调函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(function(value)&#123;</span><br><span class=\"line\">    //success</span><br><span class=\"line\">    &#125;,function(error)&#123;</span><br><span class=\"line\">    //failure</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>promise实例生成以后，可以接受两个回调函数作为参数，第一个回调函数是promise对象变为resolved时候调用，第二个是回调函数是promise变为reject时调用，第二个函数是可选的的，二者均接受promise对象传出的值作为参数。<br>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function timeout(ms)&#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">        setTimeout(resolve, ms, &apos;done&apos;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">timeout(100).then((value) =&gt; &#123;</span><br><span class=\"line\">    console.log(value)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>上述代码中timeout方法返回了一个promise实例，表示一段时间才会发生的结果，过了指定的时间，promise的实例状态变为resolved，就会触发then方法绑定的回调函数。<br>继续举例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;promise&apos;);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(function() &#123;</span><br><span class=\"line\">    console.log(&apos;resolved&apos;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(&apos;xxxx&apos;)</span><br><span class=\"line\">输出结果:</span><br><span class=\"line\">// promise</span><br><span class=\"line\">// xxxx</span><br><span class=\"line\">// resolved</span><br></pre></td></tr></table></figure></p>\n<p>上述代码中，promise建立后立即执行，首先输出promise，然后，.then方法指定的回调函数，将在当前脚本所有的同步任务执行完才会执行，所以resolved最后输出。<br>继续举例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function loadImage(url)&#123;</span><br><span class=\"line\">    retutn new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">        const image = new Image();</span><br><span class=\"line\">        image.onload = function() &#123;</span><br><span class=\"line\">            resolve(image)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        image.onerror = function() &#123;</span><br><span class=\"line\">            reject(new Error(&apos;could not load image at&apos; + url))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        image.src = url</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>异步加载图片，如果加载成功，则调用resolve方法，否则调用reject方法</p>\n<p>多个promise的实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p1 = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">    setTimeout(()=&gt;&#123;</span><br><span class=\"line\">        reject(new Error(&apos;fail&apos;), 3000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const p2 = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        resolve(p1), 1000</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p2.then(result =&gt; console.log(result))</span><br><span class=\"line\">    .catch(error =&gt; console.log(error))</span><br><span class=\"line\">//Error: fail</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"then方法，链式调用\"><a href=\"#then方法，链式调用\" class=\"headerlink\" title=\".then方法，链式调用\"></a>.then方法，链式调用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJson(&quot;/posts.json&quot;).then(</span><br><span class=\"line\">    post =&gt; getJson(post.commentURL)</span><br><span class=\"line\">).then(</span><br><span class=\"line\">    comments =&gt; console.log(&apos;resolved:&apos;,comments)</span><br><span class=\"line\">    err =&gt; console.log(&apos;reject:&apos;,err)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>上面是链式调用，从/post.json获取数据，成功后再用getJosn函数获取comment的url传入第二个.then作为参数，成功则打印评论，失误则打印错误。一般来说用catch方法捕获错误。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const promise = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">    throw new Error(&apos;test&apos;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.catch((error) =&gt; &#123;</span><br><span class=\"line\">    console.log(error)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>promise会吃掉内部的错误，例子如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const someAsyncThing = function() &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">        //这里x并没有定义</span><br><span class=\"line\">        resolve (x+2)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">someAsyncThing()</span><br><span class=\"line\">.catch( (error) =&gt; &#123;</span><br><span class=\"line\">    console.log(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(() =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;carry on&apos;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//ReferenceError: x is not defined</span><br><span class=\"line\">    at Promise (&lt;anonymous&gt;:4:18)</span><br><span class=\"line\">    at new Promise (&lt;anonymous&gt;)</span><br><span class=\"line\">    at someAsyncThing (&lt;anonymous&gt;:2:12)</span><br><span class=\"line\">    at &lt;anonymous&gt;:7:1</span><br><span class=\"line\">VM193:12 carry on</span><br></pre></td></tr></table></figure></p>\n<p>这里在X没有定义的情况下，首先捕捉了错误，即使x未定义仍然运行.then函数输出了carry on </p>\n<h3 id=\"Promise-finally\"><a href=\"#Promise-finally\" class=\"headerlink\" title=\"Promise.finally\"></a>Promise.finally</h3><p>finally 指定不敢Pormise的对象最后的结果如何，都会执行的操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise</span><br><span class=\"line\">.then(result =&gt; &#123;..&#125;)</span><br><span class=\"line\">.catch(result =&gt; &#123;...&#125;)</span><br><span class=\"line\">.finally(result =&gt; &#123;...&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p>promise.all方法讲对个promise实例，包装成一个promise实例。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p = Promise.all([p1, p2, p3])</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，promise会接受一个数组作为参数，p1, p2, p3都是Promise的实例，promise.all的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise的实例。<br>p的状态有p1,p2,p3确定：    </p>\n<ul>\n<li>只有p1, p2, p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1, p2, p3的返回值组成一个数组，作为参数传递给p的回调函数。</li>\n<li>只要p1, p2, p3有一个被reject，p的状态则变为reject，此时第一个被reject的返回值会作为参数，传递给p的回调函数。<br>具体例子如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这里并不觉得是6个promise的实例</span><br><span class=\"line\">const promises = [2,3,5,6,11,13].map(function(id) &#123;</span><br><span class=\"line\">    return getJson(&apos;/post/&apos; + id + &apos;.json&apos;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Promise.all(promises).then( (posts) =&gt; &#123;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">&#125;).catch((error) =&gt; &#123;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>再举个栗子更好理解的:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const databasePromise = connectDatabase();</span><br><span class=\"line\">const booksPromise = databasePromise</span><br><span class=\"line\">    ,then(findAllBook)</span><br><span class=\"line\">const userPromise = databasePromise</span><br><span class=\"line\">    .then(getCurrentUser)</span><br><span class=\"line\">Promise.all([bookPromise, userPromise])</span><br><span class=\"line\">    .then(([book, user]) =&gt; &#123;</span><br><span class=\"line\">        pickTopRecommentaction(book, user)</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>这里，bookPromise和userPromise是两个异步操作，只有等到他们的结果都返回了，才会去执行pickTopRecommentaction这个回调函数。需要注意的如果作为参数的promise的实例被reject了，那么不会触发Promise.all的catch方法。<br>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p1 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  resolve(&apos;hello&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(result =&gt; result)</span><br><span class=\"line\">.catch(e =&gt; e);</span><br><span class=\"line\"></span><br><span class=\"line\">const p2 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  throw new Error(&apos;报错了&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(result =&gt; result)</span><br><span class=\"line\">.catch(e =&gt; e);</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.all([p1, p2])</span><br><span class=\"line\">.then(result =&gt; console.log(result))</span><br><span class=\"line\">.catch(e =&gt; console.log(e));</span><br><span class=\"line\">// [&quot;hello&quot;, Error: 报错了]</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，p1会resolved，p2首先会rejected，但是p2有自己的catch方法，该方法返回的是一个新的 Promise 实例，p2指向的实际上是这个实例。该实例执行完catch方法后，也会变成resolved，导致Promise.all()方法参数里面的两个实例都会resolved，因此会调用then方法指定的回调函数，而不会调用catch方法指定的回调函数。<br>若p2未定义catch方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p1 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  resolve(&apos;hello&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(result =&gt; result);</span><br><span class=\"line\"></span><br><span class=\"line\">const p2 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  throw new Error(&apos;报错了&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(result =&gt; result);</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.all([p1, p2])</span><br><span class=\"line\">.then(result =&gt; console.log(result))</span><br><span class=\"line\">.catch(e =&gt; console.log(e));</span><br><span class=\"line\">// Error: 报错了</span><br></pre></td></tr></table></figure></p>\n<p>首先，p2会reject，所以reject的返回值会作为参数给Promise.all，同事调用Promise.all的catch方法。</p>\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><p>const p = Promise.race([p1, p2, p3])<br>上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</p>\n<p>Promise.race方法的参数与Promise.all方法一样，如果不是 Promise 实例，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。</p>\n<p>下面是一个例子，如果指定时间内没有获得结果，就将 Promise 的状态变为reject，否则变为resolve。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p = Promise.race([</span><br><span class=\"line\">  fetch(&apos;/resource-that-may-take-a-while&apos;),</span><br><span class=\"line\">  new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; reject(new Error(&apos;request timeout&apos;)), 5000)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">p</span><br><span class=\"line\">.then(console.log)</span><br><span class=\"line\">.catch(console.error);</span><br></pre></td></tr></table></figure></p>\n"},{"title":"socket通信","date":"2018-12-19T02:33:09.000Z","_content":"\n### <center>socket编程</center>\n\npython提供了两个基本的socket模块:\n- Socket 它提供了标准的BSD Socket API.\n- SocketServer 它提供了服务器重心，可以简化网络服务的开发。\n\n### Socker类型\n - socket.AF_UNIX: 用于同一台机器上的进程通讯(即本机通讯)\n - socket.AF_INET: 用于服务器与服务器之间的网络通讯\n - socket.AF_INET6: 基于IPV6方式的服务器与服务器之间的网络通讯\n - socket.SOCK_STREAM: 基于TCP的流式socket通信\n - socket.SOCK_DGRAM: 基于UDP的数据报式socket通信\n - socket.SOCK_RAW: 原始套接字，普通的套接字无法处理ICMP,IGMP等网络报文，而SOCK_RAW可以；其次SOCK_RAW也可以处理特殊的IPV4报头;此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造ip头\n - socket.SOCK_SEQPACKET:可靠的连续数据包服务\n \n 创建TCP Socket:\n ```\n sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n ```\n 创建UDP Socket:\n ```\n sock = sock.socket(socket.AF_INET,socket.SOCK_DGRAM)\n ```\n \n ###Socket 函数\n- TCP 在发送数据时，已经建立好TCP链接，所以不需要指定地址，而UDP是面向无链接的，每次发送都需要指定法送给谁。\n- 服务器与客户端不能直接发送列表，字典，元素等带有数据类型的数据，发送的内容必须是字符串数据\n\n### 服务器段Socket函数\n\n- s.bind(address):将套接字绑定到地址，在AF_INET下，以tuple(host,port)方式传入,如s.bind((host, port))\n- s.listen(backlog):开始监听TCP传入链接，backlog指定在拒绝连接前，操作系统可以挂起的最大连接数，该值最少为1，大部分程序设定为5就够了。\n- s.accept():接受TCP链接并返回(conn, address),其中conn是新的套接字对象们可以用来发送和接收数据，address是链接客户端地址。\n\n### 客户端Socket函数\n\n- s.connect(address): 链接到address处的套接字，一般address的格式为tuple(host,port),如果链接出错，返回socket.error错误\n- s.connect_ex(address): 功能与s.connect(address)相同,但成功返回0，失败返回errno的值\n\n\n### 公共socket函数\n\n- s.recv(bufsize[,flag]): 接受TCP套接字的数据，数据以字符串的形式返回，buffsize指定要接受的最大数据量，flag提供有关消息的其他信息，通常可以忽略。\n- s.send(string[,flag]): 发送TCP数据，将字符串的数据发送到链接的套接字，返回值是要发送的字节的数量，该数量可能小鱼string的字节大小\n- s.sendall(string[,falg]): 完整发送TCP数据，将字符串的数据发送到链接的套接字，但在返回之前尝试发送所有数据，成功返回None，失败则抛出异常\n- s.recvfrom(bufsize[,flag]): 接受UDP的套接字数据u，与recv()类似，但返回值是tuple(data,address).其中data是包含接收数据的字符串，address是发送数据的地址\n- s.sendto(string[,flag],address): 发送UDP数据，将数据发送到套接字，address形式为tuple(ipaddr,port),指定远程地址发送，返回值是发送的字节数、\n- s.close(): 关闭套接字\n- s.getpeername():返回套接字的远程地址，返回值通常是一个tuple(ipaddr,port)\n- s.getsocketname():返回套接字自己的地址,返回值通常是一个tuple(ipaddr,port)\n- s.setsocketopt(level, optname[,buflen]): 设置给定套接字选项的值\n- s.getsocketopt(level, optname[,buflen]): 返回套接字选项的值\n- s.settimeout(timeout):设置套接字的超时时间，timeout是一个浮点数，单位是s，值为None则表示永远不会超时。一般超时期应在刚创建套接字时设置，因为他们可能用于连接的操作，如s.connect()\n- s.gettimeout():返回当前的超时值，单位是s，如何没有设置超时时间则返回None\n- s.fileno():返回套接字的文件描述\n- s.setblocking(flag):如果flag为0，则将套接字设为非阻塞模式(默认值)，非阻塞模式下，如果调用recv()没发现任何数据，或者send()调用无法立即发送数据，那么将引起socket.error异常\n- s.makefile(): 创建一个与该套接字相关的文件\n \n## Socket编程思想\n\n### TCP服务器\n1.创建套接字，绑定套接字到本地IP与端口\n```\ns = socket.socket(scoket.AF_INET,socket.SOCK_STREAM)\ns.bind()\n```\n2.开始监听链接\n```\ns.listen()\n```\n3.进入循环不断接受客户端连接请求\n```\nwhile True:\n    s.accept()\n```\n4.接受客户端传来的数据，并且给对方发送数据\n```\ns.recv()\ns.sendall()\n```\n5.传输完毕后，关闭套接字\n```\ns.close()\n```\n### TCP客户端\n1.创建套接字并连接至远端地址\n```\ns = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\ns.connect()\n```\n2.链接后发送数据和接收数据\n```\ns.sendall();\ns.recv()\n```\n3.传输完毕后，关闭套接字\n\n\n\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n ","source":"_posts/socket.mkd","raw":"---\ntitle: socket通信\ndate: 2018-12-19 10:33:09\ntags: 网络编程\ncategories: socket\n---\n\n### <center>socket编程</center>\n\npython提供了两个基本的socket模块:\n- Socket 它提供了标准的BSD Socket API.\n- SocketServer 它提供了服务器重心，可以简化网络服务的开发。\n\n### Socker类型\n - socket.AF_UNIX: 用于同一台机器上的进程通讯(即本机通讯)\n - socket.AF_INET: 用于服务器与服务器之间的网络通讯\n - socket.AF_INET6: 基于IPV6方式的服务器与服务器之间的网络通讯\n - socket.SOCK_STREAM: 基于TCP的流式socket通信\n - socket.SOCK_DGRAM: 基于UDP的数据报式socket通信\n - socket.SOCK_RAW: 原始套接字，普通的套接字无法处理ICMP,IGMP等网络报文，而SOCK_RAW可以；其次SOCK_RAW也可以处理特殊的IPV4报头;此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造ip头\n - socket.SOCK_SEQPACKET:可靠的连续数据包服务\n \n 创建TCP Socket:\n ```\n sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n ```\n 创建UDP Socket:\n ```\n sock = sock.socket(socket.AF_INET,socket.SOCK_DGRAM)\n ```\n \n ###Socket 函数\n- TCP 在发送数据时，已经建立好TCP链接，所以不需要指定地址，而UDP是面向无链接的，每次发送都需要指定法送给谁。\n- 服务器与客户端不能直接发送列表，字典，元素等带有数据类型的数据，发送的内容必须是字符串数据\n\n### 服务器段Socket函数\n\n- s.bind(address):将套接字绑定到地址，在AF_INET下，以tuple(host,port)方式传入,如s.bind((host, port))\n- s.listen(backlog):开始监听TCP传入链接，backlog指定在拒绝连接前，操作系统可以挂起的最大连接数，该值最少为1，大部分程序设定为5就够了。\n- s.accept():接受TCP链接并返回(conn, address),其中conn是新的套接字对象们可以用来发送和接收数据，address是链接客户端地址。\n\n### 客户端Socket函数\n\n- s.connect(address): 链接到address处的套接字，一般address的格式为tuple(host,port),如果链接出错，返回socket.error错误\n- s.connect_ex(address): 功能与s.connect(address)相同,但成功返回0，失败返回errno的值\n\n\n### 公共socket函数\n\n- s.recv(bufsize[,flag]): 接受TCP套接字的数据，数据以字符串的形式返回，buffsize指定要接受的最大数据量，flag提供有关消息的其他信息，通常可以忽略。\n- s.send(string[,flag]): 发送TCP数据，将字符串的数据发送到链接的套接字，返回值是要发送的字节的数量，该数量可能小鱼string的字节大小\n- s.sendall(string[,falg]): 完整发送TCP数据，将字符串的数据发送到链接的套接字，但在返回之前尝试发送所有数据，成功返回None，失败则抛出异常\n- s.recvfrom(bufsize[,flag]): 接受UDP的套接字数据u，与recv()类似，但返回值是tuple(data,address).其中data是包含接收数据的字符串，address是发送数据的地址\n- s.sendto(string[,flag],address): 发送UDP数据，将数据发送到套接字，address形式为tuple(ipaddr,port),指定远程地址发送，返回值是发送的字节数、\n- s.close(): 关闭套接字\n- s.getpeername():返回套接字的远程地址，返回值通常是一个tuple(ipaddr,port)\n- s.getsocketname():返回套接字自己的地址,返回值通常是一个tuple(ipaddr,port)\n- s.setsocketopt(level, optname[,buflen]): 设置给定套接字选项的值\n- s.getsocketopt(level, optname[,buflen]): 返回套接字选项的值\n- s.settimeout(timeout):设置套接字的超时时间，timeout是一个浮点数，单位是s，值为None则表示永远不会超时。一般超时期应在刚创建套接字时设置，因为他们可能用于连接的操作，如s.connect()\n- s.gettimeout():返回当前的超时值，单位是s，如何没有设置超时时间则返回None\n- s.fileno():返回套接字的文件描述\n- s.setblocking(flag):如果flag为0，则将套接字设为非阻塞模式(默认值)，非阻塞模式下，如果调用recv()没发现任何数据，或者send()调用无法立即发送数据，那么将引起socket.error异常\n- s.makefile(): 创建一个与该套接字相关的文件\n \n## Socket编程思想\n\n### TCP服务器\n1.创建套接字，绑定套接字到本地IP与端口\n```\ns = socket.socket(scoket.AF_INET,socket.SOCK_STREAM)\ns.bind()\n```\n2.开始监听链接\n```\ns.listen()\n```\n3.进入循环不断接受客户端连接请求\n```\nwhile True:\n    s.accept()\n```\n4.接受客户端传来的数据，并且给对方发送数据\n```\ns.recv()\ns.sendall()\n```\n5.传输完毕后，关闭套接字\n```\ns.close()\n```\n### TCP客户端\n1.创建套接字并连接至远端地址\n```\ns = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\ns.connect()\n```\n2.链接后发送数据和接收数据\n```\ns.sendall();\ns.recv()\n```\n3.传输完毕后，关闭套接字\n\n\n\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n ","slug":"socket","published":1,"updated":"2018-12-19T03:44:02.367Z","_id":"cjpummqaw000fba72efdkhyal","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"socket编程\"><a href=\"#socket编程\" class=\"headerlink\" title=\"socket编程\"></a><center>socket编程</center></h3><p>python提供了两个基本的socket模块:</p>\n<ul>\n<li>Socket 它提供了标准的BSD Socket API.</li>\n<li>SocketServer 它提供了服务器重心，可以简化网络服务的开发。</li>\n</ul>\n<h3 id=\"Socker类型\"><a href=\"#Socker类型\" class=\"headerlink\" title=\"Socker类型\"></a>Socker类型</h3><ul>\n<li>socket.AF_UNIX: 用于同一台机器上的进程通讯(即本机通讯)</li>\n<li>socket.AF_INET: 用于服务器与服务器之间的网络通讯</li>\n<li>socket.AF_INET6: 基于IPV6方式的服务器与服务器之间的网络通讯</li>\n<li>socket.SOCK_STREAM: 基于TCP的流式socket通信</li>\n<li>socket.SOCK_DGRAM: 基于UDP的数据报式socket通信</li>\n<li>socket.SOCK_RAW: 原始套接字，普通的套接字无法处理ICMP,IGMP等网络报文，而SOCK_RAW可以；其次SOCK_RAW也可以处理特殊的IPV4报头;此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造ip头</li>\n<li><p>socket.SOCK_SEQPACKET:可靠的连续数据包服务</p>\n<p>创建TCP Socket:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure>\n<p>创建UDP Socket:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sock = sock.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p> ###Socket 函数</p>\n<ul>\n<li>TCP 在发送数据时，已经建立好TCP链接，所以不需要指定地址，而UDP是面向无链接的，每次发送都需要指定法送给谁。</li>\n<li>服务器与客户端不能直接发送列表，字典，元素等带有数据类型的数据，发送的内容必须是字符串数据</li>\n</ul>\n<h3 id=\"服务器段Socket函数\"><a href=\"#服务器段Socket函数\" class=\"headerlink\" title=\"服务器段Socket函数\"></a>服务器段Socket函数</h3><ul>\n<li>s.bind(address):将套接字绑定到地址，在AF_INET下，以tuple(host,port)方式传入,如s.bind((host, port))</li>\n<li>s.listen(backlog):开始监听TCP传入链接，backlog指定在拒绝连接前，操作系统可以挂起的最大连接数，该值最少为1，大部分程序设定为5就够了。</li>\n<li>s.accept():接受TCP链接并返回(conn, address),其中conn是新的套接字对象们可以用来发送和接收数据，address是链接客户端地址。</li>\n</ul>\n<h3 id=\"客户端Socket函数\"><a href=\"#客户端Socket函数\" class=\"headerlink\" title=\"客户端Socket函数\"></a>客户端Socket函数</h3><ul>\n<li>s.connect(address): 链接到address处的套接字，一般address的格式为tuple(host,port),如果链接出错，返回socket.error错误</li>\n<li>s.connect_ex(address): 功能与s.connect(address)相同,但成功返回0，失败返回errno的值</li>\n</ul>\n<h3 id=\"公共socket函数\"><a href=\"#公共socket函数\" class=\"headerlink\" title=\"公共socket函数\"></a>公共socket函数</h3><ul>\n<li>s.recv(bufsize[,flag]): 接受TCP套接字的数据，数据以字符串的形式返回，buffsize指定要接受的最大数据量，flag提供有关消息的其他信息，通常可以忽略。</li>\n<li>s.send(string[,flag]): 发送TCP数据，将字符串的数据发送到链接的套接字，返回值是要发送的字节的数量，该数量可能小鱼string的字节大小</li>\n<li>s.sendall(string[,falg]): 完整发送TCP数据，将字符串的数据发送到链接的套接字，但在返回之前尝试发送所有数据，成功返回None，失败则抛出异常</li>\n<li>s.recvfrom(bufsize[,flag]): 接受UDP的套接字数据u，与recv()类似，但返回值是tuple(data,address).其中data是包含接收数据的字符串，address是发送数据的地址</li>\n<li>s.sendto(string[,flag],address): 发送UDP数据，将数据发送到套接字，address形式为tuple(ipaddr,port),指定远程地址发送，返回值是发送的字节数、</li>\n<li>s.close(): 关闭套接字</li>\n<li>s.getpeername():返回套接字的远程地址，返回值通常是一个tuple(ipaddr,port)</li>\n<li>s.getsocketname():返回套接字自己的地址,返回值通常是一个tuple(ipaddr,port)</li>\n<li>s.setsocketopt(level, optname[,buflen]): 设置给定套接字选项的值</li>\n<li>s.getsocketopt(level, optname[,buflen]): 返回套接字选项的值</li>\n<li>s.settimeout(timeout):设置套接字的超时时间，timeout是一个浮点数，单位是s，值为None则表示永远不会超时。一般超时期应在刚创建套接字时设置，因为他们可能用于连接的操作，如s.connect()</li>\n<li>s.gettimeout():返回当前的超时值，单位是s，如何没有设置超时时间则返回None</li>\n<li>s.fileno():返回套接字的文件描述</li>\n<li>s.setblocking(flag):如果flag为0，则将套接字设为非阻塞模式(默认值)，非阻塞模式下，如果调用recv()没发现任何数据，或者send()调用无法立即发送数据，那么将引起socket.error异常</li>\n<li>s.makefile(): 创建一个与该套接字相关的文件</li>\n</ul>\n<h2 id=\"Socket编程思想\"><a href=\"#Socket编程思想\" class=\"headerlink\" title=\"Socket编程思想\"></a>Socket编程思想</h2><h3 id=\"TCP服务器\"><a href=\"#TCP服务器\" class=\"headerlink\" title=\"TCP服务器\"></a>TCP服务器</h3><p>1.创建套接字，绑定套接字到本地IP与端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(scoket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\">s.bind()</span><br></pre></td></tr></table></figure></p>\n<p>2.开始监听链接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.listen()</span><br></pre></td></tr></table></figure></p>\n<p>3.进入循环不断接受客户端连接请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while True:</span><br><span class=\"line\">    s.accept()</span><br></pre></td></tr></table></figure></p>\n<p>4.接受客户端传来的数据，并且给对方发送数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.recv()</span><br><span class=\"line\">s.sendall()</span><br></pre></td></tr></table></figure></p>\n<p>5.传输完毕后，关闭套接字<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"TCP客户端\"><a href=\"#TCP客户端\" class=\"headerlink\" title=\"TCP客户端\"></a>TCP客户端</h3><p>1.创建套接字并连接至远端地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\">s.connect()</span><br></pre></td></tr></table></figure></p>\n<p>2.链接后发送数据和接收数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.sendall();</span><br><span class=\"line\">s.recv()</span><br></pre></td></tr></table></figure></p>\n<p>3.传输完毕后，关闭套接字</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"socket编程\"><a href=\"#socket编程\" class=\"headerlink\" title=\"socket编程\"></a><center>socket编程</center></h3><p>python提供了两个基本的socket模块:</p>\n<ul>\n<li>Socket 它提供了标准的BSD Socket API.</li>\n<li>SocketServer 它提供了服务器重心，可以简化网络服务的开发。</li>\n</ul>\n<h3 id=\"Socker类型\"><a href=\"#Socker类型\" class=\"headerlink\" title=\"Socker类型\"></a>Socker类型</h3><ul>\n<li>socket.AF_UNIX: 用于同一台机器上的进程通讯(即本机通讯)</li>\n<li>socket.AF_INET: 用于服务器与服务器之间的网络通讯</li>\n<li>socket.AF_INET6: 基于IPV6方式的服务器与服务器之间的网络通讯</li>\n<li>socket.SOCK_STREAM: 基于TCP的流式socket通信</li>\n<li>socket.SOCK_DGRAM: 基于UDP的数据报式socket通信</li>\n<li>socket.SOCK_RAW: 原始套接字，普通的套接字无法处理ICMP,IGMP等网络报文，而SOCK_RAW可以；其次SOCK_RAW也可以处理特殊的IPV4报头;此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造ip头</li>\n<li><p>socket.SOCK_SEQPACKET:可靠的连续数据包服务</p>\n<p>创建TCP Socket:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure>\n<p>创建UDP Socket:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sock = sock.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p> ###Socket 函数</p>\n<ul>\n<li>TCP 在发送数据时，已经建立好TCP链接，所以不需要指定地址，而UDP是面向无链接的，每次发送都需要指定法送给谁。</li>\n<li>服务器与客户端不能直接发送列表，字典，元素等带有数据类型的数据，发送的内容必须是字符串数据</li>\n</ul>\n<h3 id=\"服务器段Socket函数\"><a href=\"#服务器段Socket函数\" class=\"headerlink\" title=\"服务器段Socket函数\"></a>服务器段Socket函数</h3><ul>\n<li>s.bind(address):将套接字绑定到地址，在AF_INET下，以tuple(host,port)方式传入,如s.bind((host, port))</li>\n<li>s.listen(backlog):开始监听TCP传入链接，backlog指定在拒绝连接前，操作系统可以挂起的最大连接数，该值最少为1，大部分程序设定为5就够了。</li>\n<li>s.accept():接受TCP链接并返回(conn, address),其中conn是新的套接字对象们可以用来发送和接收数据，address是链接客户端地址。</li>\n</ul>\n<h3 id=\"客户端Socket函数\"><a href=\"#客户端Socket函数\" class=\"headerlink\" title=\"客户端Socket函数\"></a>客户端Socket函数</h3><ul>\n<li>s.connect(address): 链接到address处的套接字，一般address的格式为tuple(host,port),如果链接出错，返回socket.error错误</li>\n<li>s.connect_ex(address): 功能与s.connect(address)相同,但成功返回0，失败返回errno的值</li>\n</ul>\n<h3 id=\"公共socket函数\"><a href=\"#公共socket函数\" class=\"headerlink\" title=\"公共socket函数\"></a>公共socket函数</h3><ul>\n<li>s.recv(bufsize[,flag]): 接受TCP套接字的数据，数据以字符串的形式返回，buffsize指定要接受的最大数据量，flag提供有关消息的其他信息，通常可以忽略。</li>\n<li>s.send(string[,flag]): 发送TCP数据，将字符串的数据发送到链接的套接字，返回值是要发送的字节的数量，该数量可能小鱼string的字节大小</li>\n<li>s.sendall(string[,falg]): 完整发送TCP数据，将字符串的数据发送到链接的套接字，但在返回之前尝试发送所有数据，成功返回None，失败则抛出异常</li>\n<li>s.recvfrom(bufsize[,flag]): 接受UDP的套接字数据u，与recv()类似，但返回值是tuple(data,address).其中data是包含接收数据的字符串，address是发送数据的地址</li>\n<li>s.sendto(string[,flag],address): 发送UDP数据，将数据发送到套接字，address形式为tuple(ipaddr,port),指定远程地址发送，返回值是发送的字节数、</li>\n<li>s.close(): 关闭套接字</li>\n<li>s.getpeername():返回套接字的远程地址，返回值通常是一个tuple(ipaddr,port)</li>\n<li>s.getsocketname():返回套接字自己的地址,返回值通常是一个tuple(ipaddr,port)</li>\n<li>s.setsocketopt(level, optname[,buflen]): 设置给定套接字选项的值</li>\n<li>s.getsocketopt(level, optname[,buflen]): 返回套接字选项的值</li>\n<li>s.settimeout(timeout):设置套接字的超时时间，timeout是一个浮点数，单位是s，值为None则表示永远不会超时。一般超时期应在刚创建套接字时设置，因为他们可能用于连接的操作，如s.connect()</li>\n<li>s.gettimeout():返回当前的超时值，单位是s，如何没有设置超时时间则返回None</li>\n<li>s.fileno():返回套接字的文件描述</li>\n<li>s.setblocking(flag):如果flag为0，则将套接字设为非阻塞模式(默认值)，非阻塞模式下，如果调用recv()没发现任何数据，或者send()调用无法立即发送数据，那么将引起socket.error异常</li>\n<li>s.makefile(): 创建一个与该套接字相关的文件</li>\n</ul>\n<h2 id=\"Socket编程思想\"><a href=\"#Socket编程思想\" class=\"headerlink\" title=\"Socket编程思想\"></a>Socket编程思想</h2><h3 id=\"TCP服务器\"><a href=\"#TCP服务器\" class=\"headerlink\" title=\"TCP服务器\"></a>TCP服务器</h3><p>1.创建套接字，绑定套接字到本地IP与端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(scoket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\">s.bind()</span><br></pre></td></tr></table></figure></p>\n<p>2.开始监听链接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.listen()</span><br></pre></td></tr></table></figure></p>\n<p>3.进入循环不断接受客户端连接请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while True:</span><br><span class=\"line\">    s.accept()</span><br></pre></td></tr></table></figure></p>\n<p>4.接受客户端传来的数据，并且给对方发送数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.recv()</span><br><span class=\"line\">s.sendall()</span><br></pre></td></tr></table></figure></p>\n<p>5.传输完毕后，关闭套接字<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"TCP客户端\"><a href=\"#TCP客户端\" class=\"headerlink\" title=\"TCP客户端\"></a>TCP客户端</h3><p>1.创建套接字并连接至远端地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\">s.connect()</span><br></pre></td></tr></table></figure></p>\n<p>2.链接后发送数据和接收数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.sendall();</span><br><span class=\"line\">s.recv()</span><br></pre></td></tr></table></figure></p>\n<p>3.传输完毕后，关闭套接字</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjpummqae0002ba72szu7xkoo","category_id":"cjpumtjlz000mba72311wzwh2","_id":"cjpumtjm0000nba72sbapx2r1"},{"post_id":"cjpummqak0005ba72j124awgs","category_id":"cjpumtjlz000mba72311wzwh2","_id":"cjpumto1b000oba7291vi3z15"},{"post_id":"cjpummqam0006ba72nq51sp1z","category_id":"cjpumtw3a000pba72b5s330nc","_id":"cjpumtw3a000qba72xusva7ys"},{"post_id":"cjpummqan0007ba72g5e8atdi","category_id":"cjpumtjlz000mba72311wzwh2","_id":"cjpumu0p1000rba72ce8lzh4g"},{"post_id":"cjpummqa40000ba725np8ecbe","category_id":"cjpumtjlz000mba72311wzwh2","_id":"cjpumu7lf000sba72yxlig0jj"},{"post_id":"cjpummqas000cba727b6u3vlm","category_id":"cjpumtjlz000mba72311wzwh2","_id":"cjpumubq4000tba72z6g16scf"},{"post_id":"cjpummqaw000fba72efdkhyal","category_id":"cjpumumvh000uba72g937cphm","_id":"cjpumumvh000vba72k87612ga"}],"PostTag":[{"post_id":"cjpummqa40000ba725np8ecbe","tag_id":"cjpummqai0004ba72431quayi","_id":"cjpummqar0009ba72txj0i3fw"},{"post_id":"cjpummqan0007ba72g5e8atdi","tag_id":"cjpummqai0004ba72431quayi","_id":"cjpummqas000bba727misgy5m"},{"post_id":"cjpummqae0002ba72szu7xkoo","tag_id":"cjpummqai0004ba72431quayi","_id":"cjpummqav000eba72n8dm9xxe"},{"post_id":"cjpummqas000cba727b6u3vlm","tag_id":"cjpummqai0004ba72431quayi","_id":"cjpummqay000gba72y7643tda"},{"post_id":"cjpummqak0005ba72j124awgs","tag_id":"cjpummqai0004ba72431quayi","_id":"cjpummqay000iba72rjkdb6mz"},{"post_id":"cjpummqam0006ba72nq51sp1z","tag_id":"cjpummqay000hba72sb9ysqxj","_id":"cjpummqaz000kba72q32317yy"},{"post_id":"cjpummqaw000fba72efdkhyal","tag_id":"cjpummqaz000jba72b4abbozi","_id":"cjpummqb0000lba729jzu2zg0"}],"Tag":[{"name":"javascript","_id":"cjpummqai0004ba72431quayi"},{"name":"dcoker","_id":"cjpummqay000hba72sb9ysqxj"},{"name":"网络编程","_id":"cjpummqaz000jba72b4abbozi"}]}}
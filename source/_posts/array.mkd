---
title: es6的数组
date: 2018-12-06 10:33:09
tags: javascript
categories: javascript
---

## <center>es6数组</center>

### 1.扩展运算符
```
console.log(...[1,2,3]) //1,2,3
console.log(1, ...[2,3,4],5)
```

- 取代apply的例子

```
ES5: Math.max.apply(null, [14,3,3])
ES6: Math.max(...[14,3,37])
```

- 另一个数组push的例子

```
var arr1 = [0,1,2]
var arr2 = [3,4,5]
Array.prototype.push.apply(arr1, arr2)
ES6: arr1.push(...arr2)
```
- 扩展运算符的应用    
<!--more -->
1.复制数组

```
const a1 = [1,2]
const a2 = a1
a2[0] = 2
a1 //[2,2,]
```
上述代码中，a2并不是数组a1的克隆，而是指向同一份数据的指针，修改a2，那么a1也会变化，es5的方法
```
const a1 = [1,2]
cosnta a2 = a1.contact()
a2[0] = 2
a1 //[1,2]
```
上述代码中a1会返回原数组的克隆，再修改a2就不会对a1产生影响，对于es6的写法如下
```
const a1 = [1,2]
const a2 = [...a1]
```

2.合并数组

```
const arr1 = ['a', 'b']
const arr2 = ['c']
const arr3 = ['d', 'e']
es5合并: arr1.contanct(arr2,arr3)
es6合并: [...arr1,...arr2,...arr3]
```
但是上述方法均是浅拷贝，如果修改了原数组的变量，那么会同步映射到新的合并的数组。

3.与解构赋值结合
```
const [first, ...rest] = [1,2,3,4,5]
first //1
rest //[2,3,4,5]
const [first, ...rest] = []
first //undefined
rest //[]
const [first, ...rest] = ['foo']
first //'foo'
rest //[]
```
### 2.Array.from()
Array.from方法用于将两类对象转化为真正的数组：类数组对象(array-like object)和可遍历对象(iterable)，类数组对象是指可以通过索引访问元素，并且拥有length属性，但是没有数组的其他方法，如push，forEach，indexOf。常见的像字典，DOM操作返回的NodeList,以及函数内部的arguments对象
```
let arrayLike = {
    '0': 'a',
    '1': 'b',
    '2': 'c',
    length: 3
};

// ES5的写法
var arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']

// ES6的写法
let arr2 = Array.from(arrayLike); // ['a', 'b', 'c']
```
### Array.of()
Array.of方法将一组值转化为数组
```
Array.of(1,11,3) //[1,11,3]
Array.of() //[]
```
### 数组实例的find和findIndex
数组实例的find方法，用于找出第一个符合条件的数组成员，他的参数是一个回调函数，若没有返回则为undefined
```
[1,3,-5,18].find((n) => n < 0) //-5
[1,5,10,15].find(function(value, index, arr){
    return value > 9
}) //2
```
findIndex同上
### 数组实例的fill
```
['a', 'b', 'c'].fill(7)
// [7, 7, 7]

new Array(3).fill(7)
// [7, 7, 7]
['a', 'b', 'c'].fill(7, 1, 2)
// ['a', 7, 'c']
```
### 数组实例的 entries()，keys() 和 values()
ES6 提供三个新的方法——entries()，keys()和values()——用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章），可以用for...of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。

```
for (let index of ['a', 'b'].keys()) {
  console.log(index);
}
// 0
// 1

for (let elem of ['a', 'b'].values()) {
  console.log(elem);
}
// 'a'
// 'b'

for (let [index, elem] of ['a', 'b'].entries()) {
  console.log(index, elem);
}
// 0 "a"
// 1 "b"
```

### Array.prototype.includes
Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。ES2016 引入了该方法。

```
[1, 2, 3].includes(2)     // true
[1, 2, 3].includes(4)     // false
[1, 2, NaN].includes(NaN) // true
```
该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。
```
[1, 2, 3].includes(3, 3);  // false
[1, 2, 3].includes(3, -1); // true
```
### 数组实例的 flat()，flatMap()
数组的成员有时还是数组，Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。
```
[1, 2, [3, 4]].flat()
// [1, 2, 3, 4]
```
flat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1。
```
[1, 2, [3, [4, 5]]].flat()
// [1, 2, 3, [4, 5]]

[1, 2, [3, [4, 5]]].flat(2)
// [1, 2, 3, 4, 5]
```
如果不管有多少层嵌套，都要转成一维数组，可以用Infinity关键字作为参数。
```
[1, [2, [3]]].flat(Infinity)
// [1, 2, 3]
```
---
title: socket通信
date: 2018-12-19 10:33:09
tags: 网络编程
categories: socket
---

### <center>socket编程</center>

python提供了两个基本的socket模块:
- Socket 它提供了标准的BSD Socket API.
- SocketServer 它提供了服务器重心，可以简化网络服务的开发。

### Socker类型
 - socket.AF_UNIX: 用于同一台机器上的进程通讯(即本机通讯)
 - socket.AF_INET: 用于服务器与服务器之间的网络通讯
 - socket.AF_INET6: 基于IPV6方式的服务器与服务器之间的网络通讯
 - socket.SOCK_STREAM: 基于TCP的流式socket通信
 - socket.SOCK_DGRAM: 基于UDP的数据报式socket通信
 - socket.SOCK_RAW: 原始套接字，普通的套接字无法处理ICMP,IGMP等网络报文，而SOCK_RAW可以；其次SOCK_RAW也可以处理特殊的IPV4报头;此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造ip头
 - socket.SOCK_SEQPACKET:可靠的连续数据包服务
 
 创建TCP Socket:
 ```
 sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
 ```
 创建UDP Socket:
 ```
 sock = sock.socket(socket.AF_INET,socket.SOCK_DGRAM)
 ```
 
 ###Socket 函数
- TCP 在发送数据时，已经建立好TCP链接，所以不需要指定地址，而UDP是面向无链接的，每次发送都需要指定法送给谁。
- 服务器与客户端不能直接发送列表，字典，元素等带有数据类型的数据，发送的内容必须是字符串数据

### 服务器段Socket函数

- s.bind(address):将套接字绑定到地址，在AF_INET下，以tuple(host,port)方式传入,如s.bind((host, port))
- s.listen(backlog):开始监听TCP传入链接，backlog指定在拒绝连接前，操作系统可以挂起的最大连接数，该值最少为1，大部分程序设定为5就够了。
- s.accept():接受TCP链接并返回(conn, address),其中conn是新的套接字对象们可以用来发送和接收数据，address是链接客户端地址。

### 客户端Socket函数

- s.connect(address): 链接到address处的套接字，一般address的格式为tuple(host,port),如果链接出错，返回socket.error错误
- s.connect_ex(address): 功能与s.connect(address)相同,但成功返回0，失败返回errno的值


### 公共socket函数

- s.recv(bufsize[,flag]): 接受TCP套接字的数据，数据以字符串的形式返回，buffsize指定要接受的最大数据量，flag提供有关消息的其他信息，通常可以忽略。
- s.send(string[,flag]): 发送TCP数据，将字符串的数据发送到链接的套接字，返回值是要发送的字节的数量，该数量可能小鱼string的字节大小
- s.sendall(string[,falg]): 完整发送TCP数据，将字符串的数据发送到链接的套接字，但在返回之前尝试发送所有数据，成功返回None，失败则抛出异常
- s.recvfrom(bufsize[,flag]): 接受UDP的套接字数据u，与recv()类似，但返回值是tuple(data,address).其中data是包含接收数据的字符串，address是发送数据的地址
- s.sendto(string[,flag],address): 发送UDP数据，将数据发送到套接字，address形式为tuple(ipaddr,port),指定远程地址发送，返回值是发送的字节数、
- s.close(): 关闭套接字
- s.getpeername():返回套接字的远程地址，返回值通常是一个tuple(ipaddr,port)
- s.getsocketname():返回套接字自己的地址,返回值通常是一个tuple(ipaddr,port)
- s.setsocketopt(level, optname[,buflen]): 设置给定套接字选项的值
- s.getsocketopt(level, optname[,buflen]): 返回套接字选项的值
- s.settimeout(timeout):设置套接字的超时时间，timeout是一个浮点数，单位是s，值为None则表示永远不会超时。一般超时期应在刚创建套接字时设置，因为他们可能用于连接的操作，如s.connect()
- s.gettimeout():返回当前的超时值，单位是s，如何没有设置超时时间则返回None
- s.fileno():返回套接字的文件描述
- s.setblocking(flag):如果flag为0，则将套接字设为非阻塞模式(默认值)，非阻塞模式下，如果调用recv()没发现任何数据，或者send()调用无法立即发送数据，那么将引起socket.error异常
- s.makefile(): 创建一个与该套接字相关的文件
 
## Socket编程思想

### TCP服务器
1.创建套接字，绑定套接字到本地IP与端口
```
s = socket.socket(scoket.AF_INET,socket.SOCK_STREAM)
s.bind()
```
2.开始监听链接
```
s.listen()
```
3.进入循环不断接受客户端连接请求
```
while True:
    s.accept()
```
4.接受客户端传来的数据，并且给对方发送数据
```
s.recv()
s.sendall()
```
5.传输完毕后，关闭套接字
```
s.close()
```
### TCP客户端
1.创建套接字并连接至远端地址
```
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect()
```
2.链接后发送数据和接收数据
```
s.sendall();
s.recv()
```
3.传输完毕后，关闭套接字



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 